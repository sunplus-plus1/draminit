// [dwc_ddrphy_phyinit_main] Start of dwc_ddrphy_phyinit_main()
// [dwc_ddrphy_phyinit_sequence] Start of dwc_ddrphy_phyinit_sequence()
// [dwc_ddrphy_phyinit_initStruct] Start of dwc_ddrphy_phyinit_initStruct()
// [dwc_ddrphy_phyinit_initStruct] End of dwc_ddrphy_phyinit_initStruct()
// [dwc_ddrphy_phyinit_setDefault] Start of dwc_ddrphy_phyinit_setDefault()
// [dwc_ddrphy_phyinit_setDefault] End of dwc_ddrphy_phyinit_setDefault()


// //##############################################################
// 
// // dwc_ddrphy_phyinit_userCustom_overrideUserInput is a user-editable function.
// //
// // See PhyInit App Note for detailed description and function usage
//
// //##############################################################

dwc_ddrphy_phyinit_userCustom_overrideUserInput ();
// 
//  [dwc_ddrphy_phyinit_userCustom_overrideUserInput] End of dwc_ddrphy_phyinit_userCustom_overrideUserInput()
//[dwc_ddrphy_phyinit_calcMb] Start of dwc_ddrphy_phyinit_calcMb()
// // [dwc_ddrphy_phyinit_softSetMb] Setting mb_LPDDR4_1D[0].Pstate to 0x0
// // [dwc_ddrphy_phyinit_softSetMb] Setting mb_LPDDR4_1D[0].DRAMFreq to 0xc80
// // [dwc_ddrphy_phyinit_softSetMb] Setting mb_LPDDR4_1D[0].PllBypassEn to 0x1
// // [dwc_ddrphy_phyinit_softSetMb] Setting mb_LPDDR4_1D[0].DfiFreqRatio to 0x2
// // [dwc_ddrphy_phyinit_softSetMb] Setting mb_LPDDR4_1D[0].PhyOdtImpedance to 0x0
// // [dwc_ddrphy_phyinit_softSetMb] Setting mb_LPDDR4_1D[0].PhyDrvImpedance to 0x0
// // [dwc_ddrphy_phyinit_softSetMb] Setting mb_LPDDR4_1D[0].BPZNResVal to 0x0
// // [dwc_ddrphy_phyinit_softSetMb] Setting mb_LPDDR4_1D[0].EnabledDQsChA to 0x10
// // [dwc_ddrphy_phyinit_softSetMb] Setting mb_LPDDR4_1D[0].CsPresentChA to 0x1
// // [dwc_ddrphy_phyinit_softSetMb] Setting mb_LPDDR4_1D[0].EnabledDQsChB to 0x10
// // [dwc_ddrphy_phyinit_softSetMb] Setting mb_LPDDR4_1D[0].CsPresentChB to 0x1
//[dwc_ddrphy_phyinit_calcMb] End of dwc_ddrphy_phyinit_calcMb()
// // [phyinit_print_dat] // ####################################################
// // [phyinit_print_dat] // 
// // [phyinit_print_dat] // Printing Runtime input values
// // [phyinit_print_dat] // 
// // [phyinit_print_dat] // ####################################################
// // [phyinit_print_dat] runtimeConfig.skip_training = 2
// // [phyinit_print_dat] runtimeConfig.Train2D       = 0
// // [phyinit_print_dat] runtimeConfig.debug         = 1
// // [phyinit_print_dat] runtimeConfig.RetEn         = 0
// // [phyinit_print_dat] // ####################################################
// // [phyinit_print_dat] // 
// // [phyinit_print_dat] // Printing values in user input structure
// // [phyinit_print_dat] // 
// // [phyinit_print_dat] // ####################################################
// // [phyinit_print_dat] userInputBasic.Frequency[0] = 1600
// // [phyinit_print_dat] userInputBasic.Frequency[1] = 1067
// // [phyinit_print_dat] userInputBasic.Frequency[2] = 933
// // [phyinit_print_dat] userInputBasic.Frequency[3] = 800
// // [phyinit_print_dat] userInputBasic.NumRank_dfi0 = 1
// // [phyinit_print_dat] userInputBasic.ReadDBIEnable[0] = 0
// // [phyinit_print_dat] userInputBasic.ReadDBIEnable[1] = 0
// // [phyinit_print_dat] userInputBasic.ReadDBIEnable[2] = 0
// // [phyinit_print_dat] userInputBasic.ReadDBIEnable[3] = 0
// // [phyinit_print_dat] userInputBasic.Lp4xMode = 0
// // [phyinit_print_dat] userInputBasic.DimmType = 0
// // [phyinit_print_dat] userInputBasic.DfiMode = 3
// // [phyinit_print_dat] userInputBasic.DramType = 2
// // [phyinit_print_dat] userInputBasic.HardMacroVer = 4
// // [phyinit_print_dat] userInputBasic.DfiFreqRatio[0] = 1
// // [phyinit_print_dat] userInputBasic.DfiFreqRatio[1] = 1
// // [phyinit_print_dat] userInputBasic.DfiFreqRatio[2] = 1
// // [phyinit_print_dat] userInputBasic.DfiFreqRatio[3] = 1
// // [phyinit_print_dat] userInputBasic.NumAnib = 10
// // [phyinit_print_dat] userInputBasic.NumDbyte = 4
// // [phyinit_print_dat] userInputBasic.DramDataWidth = 16
// // [phyinit_print_dat] userInputBasic.PllBypass[0] = 1
// // [phyinit_print_dat] userInputBasic.PllBypass[1] = 1
// // [phyinit_print_dat] userInputBasic.PllBypass[2] = 1
// // [phyinit_print_dat] userInputBasic.PllBypass[3] = 1
// // [phyinit_print_dat] userInputBasic.Dfi1Exists = 1
// // [phyinit_print_dat] userInputBasic.Train2D = 0
// // [phyinit_print_dat] userInputBasic.NumRank_dfi1 = 1
// // [phyinit_print_dat] userInputBasic.NumActiveDbyteDfi0 = 2
// // [phyinit_print_dat] userInputBasic.NumPStates = 1
// // [phyinit_print_dat] userInputBasic.NumActiveDbyteDfi1 = 2
// // [phyinit_print_dat] userInputAdvanced.TxSlewRiseAC = 15
// // [phyinit_print_dat] userInputAdvanced.TxSlewFallDQ[0] = 15
// // [phyinit_print_dat] userInputAdvanced.TxSlewFallDQ[1] = 15
// // [phyinit_print_dat] userInputAdvanced.TxSlewFallDQ[2] = 15
// // [phyinit_print_dat] userInputAdvanced.TxSlewFallDQ[3] = 15
// // [phyinit_print_dat] userInputAdvanced.Lp4WLS[0] = 0
// // [phyinit_print_dat] userInputAdvanced.Lp4WLS[1] = 0
// // [phyinit_print_dat] userInputAdvanced.Lp4WLS[2] = 0
// // [phyinit_print_dat] userInputAdvanced.Lp4WLS[3] = 0
// // [phyinit_print_dat] userInputAdvanced.TxImpedance[0] = 60
// // [phyinit_print_dat] userInputAdvanced.TxImpedance[1] = 60
// // [phyinit_print_dat] userInputAdvanced.TxImpedance[2] = 60
// // [phyinit_print_dat] userInputAdvanced.TxImpedance[3] = 60
// // [phyinit_print_dat] userInputAdvanced.DramByteSwap = 0
// // [phyinit_print_dat] userInputAdvanced.CalInterval = 9
// // [phyinit_print_dat] userInputAdvanced.D4RxPreambleLength[0] = 0
// // [phyinit_print_dat] userInputAdvanced.D4RxPreambleLength[1] = 0
// // [phyinit_print_dat] userInputAdvanced.D4RxPreambleLength[2] = 0
// // [phyinit_print_dat] userInputAdvanced.D4RxPreambleLength[3] = 0
// // [phyinit_print_dat] userInputAdvanced.Lp4PostambleExt[0] = 1
// // [phyinit_print_dat] userInputAdvanced.Lp4PostambleExt[1] = 1
// // [phyinit_print_dat] userInputAdvanced.Lp4PostambleExt[2] = 1
// // [phyinit_print_dat] userInputAdvanced.Lp4PostambleExt[3] = 1
// // [phyinit_print_dat] userInputAdvanced.CalOnce = 0
// // [phyinit_print_dat] userInputAdvanced.SnpsUmctlF0RC5x[0] = 0
// // [phyinit_print_dat] userInputAdvanced.SnpsUmctlF0RC5x[1] = 0
// // [phyinit_print_dat] userInputAdvanced.SnpsUmctlF0RC5x[2] = 0
// // [phyinit_print_dat] userInputAdvanced.SnpsUmctlF0RC5x[3] = 0
// // [phyinit_print_dat] userInputAdvanced.WDQSExt = 0
// // [phyinit_print_dat] userInputAdvanced.RxEnBackOff = 1
// // [phyinit_print_dat] userInputAdvanced.Lp4LowPowerDrv = 0
// // [phyinit_print_dat] userInputAdvanced.TrainSequenceCtrl = 0
// // [phyinit_print_dat] userInputAdvanced.Lp4WL[0] = 5
// // [phyinit_print_dat] userInputAdvanced.Lp4WL[1] = 0
// // [phyinit_print_dat] userInputAdvanced.Lp4WL[2] = 0
// // [phyinit_print_dat] userInputAdvanced.Lp4WL[3] = 0
// // [phyinit_print_dat] userInputAdvanced.PhyMstrTrainInterval[0] = 10
// // [phyinit_print_dat] userInputAdvanced.PhyMstrTrainInterval[1] = 10
// // [phyinit_print_dat] userInputAdvanced.PhyMstrTrainInterval[2] = 10
// // [phyinit_print_dat] userInputAdvanced.PhyMstrTrainInterval[3] = 10
// // [phyinit_print_dat] userInputAdvanced.Lp4nWR[0] = 5
// // [phyinit_print_dat] userInputAdvanced.Lp4nWR[1] = 0
// // [phyinit_print_dat] userInputAdvanced.Lp4nWR[2] = 0
// // [phyinit_print_dat] userInputAdvanced.Lp4nWR[3] = 0
// // [phyinit_print_dat] userInputAdvanced.MemAlertPUImp = 5
// // [phyinit_print_dat] userInputAdvanced.TxSlewRiseDQ[0] = 15
// // [phyinit_print_dat] userInputAdvanced.TxSlewRiseDQ[1] = 15
// // [phyinit_print_dat] userInputAdvanced.TxSlewRiseDQ[2] = 15
// // [phyinit_print_dat] userInputAdvanced.TxSlewRiseDQ[3] = 15
// // [phyinit_print_dat] userInputAdvanced.DisableRetraining = 0
// // [phyinit_print_dat] userInputAdvanced.MemAlertVrefLevel = 41
// // [phyinit_print_dat] userInputAdvanced.Lp4DbiRd[0] = 0
// // [phyinit_print_dat] userInputAdvanced.Lp4DbiRd[1] = 0
// // [phyinit_print_dat] userInputAdvanced.Lp4DbiRd[2] = 0
// // [phyinit_print_dat] userInputAdvanced.Lp4DbiRd[3] = 0
// // [phyinit_print_dat] userInputAdvanced.Lp4RxPreambleMode[0] = 0
// // [phyinit_print_dat] userInputAdvanced.Lp4RxPreambleMode[1] = 0
// // [phyinit_print_dat] userInputAdvanced.Lp4RxPreambleMode[2] = 0
// // [phyinit_print_dat] userInputAdvanced.Lp4RxPreambleMode[3] = 0
// // [phyinit_print_dat] userInputAdvanced.DisDynAdrTri[0] = 1
// // [phyinit_print_dat] userInputAdvanced.DisDynAdrTri[1] = 1
// // [phyinit_print_dat] userInputAdvanced.DisDynAdrTri[2] = 1
// // [phyinit_print_dat] userInputAdvanced.DisDynAdrTri[3] = 1
// // [phyinit_print_dat] userInputAdvanced.Lp4DbiWr[0] = 0
// // [phyinit_print_dat] userInputAdvanced.Lp4DbiWr[1] = 0
// // [phyinit_print_dat] userInputAdvanced.Lp4DbiWr[2] = 0
// // [phyinit_print_dat] userInputAdvanced.Lp4DbiWr[3] = 0
// // [phyinit_print_dat] userInputAdvanced.SnpsUmctlOpt = 0
// // [phyinit_print_dat] userInputAdvanced.ODTImpedance[0] = 0
// // [phyinit_print_dat] userInputAdvanced.ODTImpedance[1] = 0
// // [phyinit_print_dat] userInputAdvanced.ODTImpedance[2] = 0
// // [phyinit_print_dat] userInputAdvanced.ODTImpedance[3] = 0
// // [phyinit_print_dat] userInputAdvanced.PhyInitSequenceNum = 0
// // [phyinit_print_dat] userInputAdvanced.DisablePhyUpdate = 0
// // [phyinit_print_dat] userInputAdvanced.D4TxPreambleLength[0] = 0
// // [phyinit_print_dat] userInputAdvanced.D4TxPreambleLength[1] = 0
// // [phyinit_print_dat] userInputAdvanced.D4TxPreambleLength[2] = 0
// // [phyinit_print_dat] userInputAdvanced.D4TxPreambleLength[3] = 0
// // [phyinit_print_dat] userInputAdvanced.MemAlertEn = 0
// // [phyinit_print_dat] userInputAdvanced.MemAlertSyncBypass = 0
// // [phyinit_print_dat] userInputAdvanced.PhyMstrMaxReqToAck[0] = 5
// // [phyinit_print_dat] userInputAdvanced.PhyMstrMaxReqToAck[1] = 5
// // [phyinit_print_dat] userInputAdvanced.PhyMstrMaxReqToAck[2] = 5
// // [phyinit_print_dat] userInputAdvanced.PhyMstrMaxReqToAck[3] = 5
// // [phyinit_print_dat] userInputAdvanced.DisableUnusedAddrLns = 0
// // [phyinit_print_dat] userInputAdvanced.ATxImpedance = 20
// // [phyinit_print_dat] userInputAdvanced.ExtCalResVal = 0
// // [phyinit_print_dat] userInputAdvanced.TxSlewFallAC = 15
// // [phyinit_print_dat] userInputAdvanced.EnableHighClkSkewFix = 0
// // [phyinit_print_dat] userInputAdvanced.Lp4RL[0] = 5
// // [phyinit_print_dat] userInputAdvanced.Lp4RL[1] = 0
// // [phyinit_print_dat] userInputAdvanced.Lp4RL[2] = 0
// // [phyinit_print_dat] userInputAdvanced.Lp4RL[3] = 0
// // [phyinit_print_dat] userInputAdvanced.Is2Ttiming[0] = 0
// // [phyinit_print_dat] userInputAdvanced.Is2Ttiming[1] = 0
// // [phyinit_print_dat] userInputAdvanced.Is2Ttiming[2] = 0
// // [phyinit_print_dat] userInputAdvanced.Is2Ttiming[3] = 0
// // [phyinit_print_dat] userInputSim.tDQS2DQ    = 200
// // [phyinit_print_dat] userInputSim.tDQSCK     = 1500
// // [phyinit_print_dat] userInputSim.tSTAOFF[0] = 0
// // [phyinit_print_dat] userInputSim.tSTAOFF[1] = 0
// // [phyinit_print_dat] userInputSim.tSTAOFF[2] = 0
// // [phyinit_print_dat] userInputSim.tSTAOFF[3] = 0
// // [phyinit_print_dat] // ####################################################
// // [phyinit_print_dat] // 
// // [phyinit_print_dat] // Printing values of 1D message block input/inout fields, PState=0
// // [phyinit_print_dat] // 
// // [phyinit_print_dat] // ####################################################
// // [phyinit_print_dat] mb_LPDDR4_1D[0].Reserved00 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MsgMisc = 0x6
// // [phyinit_print_dat] mb_LPDDR4_1D[0].Pstate = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].PllBypassEn = 0x1
// // [phyinit_print_dat] mb_LPDDR4_1D[0].DRAMFreq = 0xc80
// // [phyinit_print_dat] mb_LPDDR4_1D[0].DfiFreqRatio = 0x2
// // [phyinit_print_dat] mb_LPDDR4_1D[0].BPZNResVal = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].PhyOdtImpedance = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].PhyDrvImpedance = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].PhyVref = 0x14
// // [phyinit_print_dat] mb_LPDDR4_1D[0].Lp4Misc = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].Reserved0E = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].SequenceCtrl = 0x1
// // [phyinit_print_dat] mb_LPDDR4_1D[0].HdtCtrl = 0xc8
// // [phyinit_print_dat] mb_LPDDR4_1D[0].DFIMRLMargin = 0x2
// // [phyinit_print_dat] mb_LPDDR4_1D[0].UseBroadcastMR = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].Lp4Quickboot = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].Reserved1A = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].CATrainOpt = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].X8Mode = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].Share2DVrefResult = 0x1
// // [phyinit_print_dat] mb_LPDDR4_1D[0].PhyConfigOverride = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].EnabledDQsChA = 0x10
// // [phyinit_print_dat] mb_LPDDR4_1D[0].CsPresentChA = 0x1
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR1_A0 = 0x54
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR2_A0 = 0x2d
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR3_A0 = 0x3
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR4_A0 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR11_A0 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR12_A0 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR13_A0 = 0x28
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR14_A0 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR16_A0 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR17_A0 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR22_A0 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR24_A0 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR1_A1 = 0x54
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR2_A1 = 0x2d
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR3_A1 = 0x3
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR4_A1 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR11_A1 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR12_A1 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR13_A1 = 0x28
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR14_A1 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR16_A1 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR17_A1 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR22_A1 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR24_A1 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].CATerminatingRankChA = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].EnabledDQsChB = 0x10
// // [phyinit_print_dat] mb_LPDDR4_1D[0].CsPresentChB = 0x1
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR1_B0 = 0x54
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR2_B0 = 0x2d
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR3_B0 = 0x3
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR4_B0 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR11_B0 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR12_B0 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR13_B0 = 0x28
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR14_B0 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR16_B0 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR17_B0 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR22_B0 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR24_B0 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR1_B1 = 0x54
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR2_B1 = 0x2d
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR3_B1 = 0x3
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR4_B1 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR11_B1 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR12_B1 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR13_B1 = 0x28
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR14_B1 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR16_B1 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR17_B1 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR22_B1 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].MR24_B1 = 0x0
// // [phyinit_print_dat] mb_LPDDR4_1D[0].CATerminatingRankChB = 0x0


// //##############################################################
// //
// // Step (A) : Bring up VDD, VDDQ, and VAA 
// //
// // See PhyInit App Note for detailed description and function usage
// //
// //############################################################## 


dwc_ddrphy_phyinit_userCustom_A_bringupPower ();

// [dwc_ddrphy_phyinit_userCustom_A_bringupPower] End of dwc_ddrphy_phyinit_userCustom_A_bringupPower()
// [dwc_ddrphy_phyinit_userCustom_B_startClockResetPhy] Start of dwc_ddrphy_phyinit_userCustom_B_startClockResetPhy()
// 
// 
// //##############################################################
// //
// // Step (B) Start Clocks and Reset the PHY 
// //
// // See PhyInit App Note for detailed description and function usage
// //
// //##############################################################
// 
// 
dwc_ddrphy_phyinit_userCustom_B_startClockResetPhy ();

// [dwc_ddrphy_phyinit_userCustom_B_startClockResetPhy] End of dwc_ddrphy_phyinit_userCustom_B_startClockResetPhy()
// 

// //##############################################################
// //
// // Step (C) Initialize PHY Configuration 
// //
// // Load the required PHY configuration registers for the appropriate mode and memory configuration
// //
// //##############################################################
// 

// // [phyinit_C_initPhyConfig] Start of dwc_ddrphy_phyinit_C_initPhyConfig()
// 
// //##############################################################
// // TxPreDrvMode[2] = userInputBasic.Lp4xMode 
// //##############################################################
// // [phyinit_C_initPhyConfig] Pstate=0, Memclk=1600MHz, Programming TxSlewRate::TxPreDrvMode to 0x1
// // [phyinit_C_initPhyConfig] Pstate=0, Memclk=1600MHz, Programming TxSlewRate::TxPreP to 0xf
// // [phyinit_C_initPhyConfig] Pstate=0, Memclk=1600MHz, Programming TxSlewRate::TxPreN to 0xf
// // [phyinit_C_initPhyConfig] ### NOTE ### Optimal setting for TxSlewRate::TxPreP and TxSlewRate::TxPreP are technology specific.
// // [phyinit_C_initPhyConfig] ### NOTE ### Please consult the "Output Slew Rate" section of HSpice Model App Note in specific technology for recommended settings

dwc_ddrphy_apb_wr(0x1005f,0x1ff); // DWC_DDRPHYA_DBYTE0_TxSlewRate_b0_p0
dwc_ddrphy_apb_wr(0x1015f,0x1ff); // DWC_DDRPHYA_DBYTE0_TxSlewRate_b1_p0
dwc_ddrphy_apb_wr(0x1105f,0x1ff); // DWC_DDRPHYA_DBYTE1_TxSlewRate_b0_p0
dwc_ddrphy_apb_wr(0x1115f,0x1ff); // DWC_DDRPHYA_DBYTE1_TxSlewRate_b1_p0
dwc_ddrphy_apb_wr(0x1205f,0x1ff); // DWC_DDRPHYA_DBYTE2_TxSlewRate_b0_p0
dwc_ddrphy_apb_wr(0x1215f,0x1ff); // DWC_DDRPHYA_DBYTE2_TxSlewRate_b1_p0
dwc_ddrphy_apb_wr(0x1305f,0x1ff); // DWC_DDRPHYA_DBYTE3_TxSlewRate_b0_p0
dwc_ddrphy_apb_wr(0x1315f,0x1ff); // DWC_DDRPHYA_DBYTE3_TxSlewRate_b1_p0
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreDrvMode to 0x1, ANIB=0
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreP to 0xf, ANIB=0
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreN to 0xf, ANIB=0
// // [phyinit_C_initPhyConfig] ### NOTE ### Optimal setting for ATxSlewRate::ATxPreP and ATxSlewRate::ATxPreP are technology specific.
// // [phyinit_C_initPhyConfig] ### NOTE ### Please consult the "Output Slew Rate" section of HSpice Model App Note in specific technology for recommended settings

dwc_ddrphy_apb_wr(0x55,0x1ff); // DWC_DDRPHYA_ANIB0_ATxSlewRate
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreDrvMode to 0x1, ANIB=1
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreP to 0xf, ANIB=1
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreN to 0xf, ANIB=1
// // [phyinit_C_initPhyConfig] ### NOTE ### Optimal setting for ATxSlewRate::ATxPreP and ATxSlewRate::ATxPreP are technology specific.
// // [phyinit_C_initPhyConfig] ### NOTE ### Please consult the "Output Slew Rate" section of HSpice Model App Note in specific technology for recommended settings

dwc_ddrphy_apb_wr(0x1055,0x1ff); // DWC_DDRPHYA_ANIB1_ATxSlewRate
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreDrvMode to 0x1, ANIB=2
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreP to 0xf, ANIB=2
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreN to 0xf, ANIB=2
// // [phyinit_C_initPhyConfig] ### NOTE ### Optimal setting for ATxSlewRate::ATxPreP and ATxSlewRate::ATxPreP are technology specific.
// // [phyinit_C_initPhyConfig] ### NOTE ### Please consult the "Output Slew Rate" section of HSpice Model App Note in specific technology for recommended settings

dwc_ddrphy_apb_wr(0x2055,0x1ff); // DWC_DDRPHYA_ANIB2_ATxSlewRate
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreDrvMode to 0x1, ANIB=3
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreP to 0xf, ANIB=3
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreN to 0xf, ANIB=3
// // [phyinit_C_initPhyConfig] ### NOTE ### Optimal setting for ATxSlewRate::ATxPreP and ATxSlewRate::ATxPreP are technology specific.
// // [phyinit_C_initPhyConfig] ### NOTE ### Please consult the "Output Slew Rate" section of HSpice Model App Note in specific technology for recommended settings

dwc_ddrphy_apb_wr(0x3055,0x1ff); // DWC_DDRPHYA_ANIB3_ATxSlewRate
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreDrvMode to 0x1, ANIB=4
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreP to 0xf, ANIB=4
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreN to 0xf, ANIB=4
// // [phyinit_C_initPhyConfig] ### NOTE ### Optimal setting for ATxSlewRate::ATxPreP and ATxSlewRate::ATxPreP are technology specific.
// // [phyinit_C_initPhyConfig] ### NOTE ### Please consult the "Output Slew Rate" section of HSpice Model App Note in specific technology for recommended settings

dwc_ddrphy_apb_wr(0x4055,0x1ff); // DWC_DDRPHYA_ANIB4_ATxSlewRate
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreDrvMode to 0x1, ANIB=5
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreP to 0xf, ANIB=5
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreN to 0xf, ANIB=5
// // [phyinit_C_initPhyConfig] ### NOTE ### Optimal setting for ATxSlewRate::ATxPreP and ATxSlewRate::ATxPreP are technology specific.
// // [phyinit_C_initPhyConfig] ### NOTE ### Please consult the "Output Slew Rate" section of HSpice Model App Note in specific technology for recommended settings

dwc_ddrphy_apb_wr(0x5055,0x1ff); // DWC_DDRPHYA_ANIB5_ATxSlewRate
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreDrvMode to 0x1, ANIB=6
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreP to 0xf, ANIB=6
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreN to 0xf, ANIB=6
// // [phyinit_C_initPhyConfig] ### NOTE ### Optimal setting for ATxSlewRate::ATxPreP and ATxSlewRate::ATxPreP are technology specific.
// // [phyinit_C_initPhyConfig] ### NOTE ### Please consult the "Output Slew Rate" section of HSpice Model App Note in specific technology for recommended settings

dwc_ddrphy_apb_wr(0x6055,0x1ff); // DWC_DDRPHYA_ANIB6_ATxSlewRate
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreDrvMode to 0x1, ANIB=7
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreP to 0xf, ANIB=7
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreN to 0xf, ANIB=7
// // [phyinit_C_initPhyConfig] ### NOTE ### Optimal setting for ATxSlewRate::ATxPreP and ATxSlewRate::ATxPreP are technology specific.
// // [phyinit_C_initPhyConfig] ### NOTE ### Please consult the "Output Slew Rate" section of HSpice Model App Note in specific technology for recommended settings

dwc_ddrphy_apb_wr(0x7055,0x1ff); // DWC_DDRPHYA_ANIB7_ATxSlewRate
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreDrvMode to 0x1, ANIB=8
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreP to 0xf, ANIB=8
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreN to 0xf, ANIB=8
// // [phyinit_C_initPhyConfig] ### NOTE ### Optimal setting for ATxSlewRate::ATxPreP and ATxSlewRate::ATxPreP are technology specific.
// // [phyinit_C_initPhyConfig] ### NOTE ### Please consult the "Output Slew Rate" section of HSpice Model App Note in specific technology for recommended settings

dwc_ddrphy_apb_wr(0x8055,0x1ff); // DWC_DDRPHYA_ANIB8_ATxSlewRate
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreDrvMode to 0x1, ANIB=9
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreP to 0xf, ANIB=9
// // [phyinit_C_initPhyConfig] Programming ATxSlewRate::ATxPreN to 0xf, ANIB=9
// // [phyinit_C_initPhyConfig] ### NOTE ### Optimal setting for ATxSlewRate::ATxPreP and ATxSlewRate::ATxPreP are technology specific.
// // [phyinit_C_initPhyConfig] ### NOTE ### Please consult the "Output Slew Rate" section of HSpice Model App Note in specific technology for recommended settings

dwc_ddrphy_apb_wr(0x9055,0x1ff); // DWC_DDRPHYA_ANIB9_ATxSlewRate
dwc_ddrphy_apb_wr(0x200c5,0x19); // DWC_DDRPHYA_MASTER0_PllCtrl2_p0
// // [phyinit_C_initPhyConfig] Pstate=0,  Memclk=1600MHz, Programming PllCtrl2 to 19 based on DfiClk frequency = 800.
// 
// //##############################################################
// //
// // Program ARdPtrInitVal based on Frequency and PLL Bypass inputs
// // The values programmed here assume ideal properties of DfiClk
// // and Pclk including:
// // - DfiClk skew
// // - DfiClk jitter
// // - DfiClk PVT variations
// // - Pclk skew
// // - Pclk jitter
// //
// // PLL Bypassed mode:
// //     For MemClk frequency > 933MHz, the valid range of ARdPtrInitVal_p0[3:0] is: 2-6
// //     For MemClk frequency < 933MHz, the valid range of ARdPtrInitVal_p0[3:0] is: 1-6
// //
// // PLL Enabled mode:
// //     For MemClk frequency > 933MHz, the valid range of ARdPtrInitVal_p0[3:0] is: 1-6
// //     For MemClk frequency < 933MHz, the valid range of ARdPtrInitVal_p0[3:0] is: 0-6
// //
// //##############################################################
// // [phyinit_C_initPhyConfig] Pstate=0, Memclk=1600MHz, Programming ARdPtrInitVal to 0x3
dwc_ddrphy_apb_wr(0x2002e,0x3); // DWC_DDRPHYA_MASTER0_ARdPtrInitVal_p0
// 
// //##############################################################
// // Seq0BGPR4       = 0: Make ProcOdtAlwaysOn = 0 and ProcOdtAlwaysOff = 0 
// //##############################################################
// // [phyinit_C_initPhyConfig] Pstate=0, Memclk=1600MHz, Programming ProcOdtCtl: Seq0BGPR4.ProcOdtAlwaysOff  to 0x0
// // [phyinit_C_initPhyConfig] Pstate=0, Memclk=1600MHz, Programming ProcOdtCtl: Seq0BGPR4.ProcOdtAlwaysOn   to 0x0
dwc_ddrphy_apb_wr(0x90204,0x0); // DWC_DDRPHYA_INITENG0_Seq0BGPR4_p0
// // [phyinit_C_initPhyConfig] Pstate=0, Memclk=1600MHz, Programming DqsPreambleControl::TwoTckRxDqsPre to 0x1
// // [phyinit_C_initPhyConfig] Pstate=0, Memclk=1600MHz, Programming DqsPreambleControl::TwoTckTxDqsPre to 0x1
// // [phyinit_C_initPhyConfig] Pstate=0, Memclk=1600MHz, Programming DqsPreambleControl::PositionDfeInit to 0x0
// // [phyinit_C_initPhyConfig] Pstate=0, Memclk=1600MHz, Programming DqsPreambleControl::LP4TglTwoTckTxDqsPre to 0x1
// // [phyinit_C_initPhyConfig] Pstate=0, Memclk=1600MHz, Programming DqsPreambleControl::LP4PostambleExt to 0x1
// // [phyinit_C_initPhyConfig] Pstate=0, Memclk=1600MHz, Programming DqsPreambleControl::LP4SttcPreBridgeRxEn to 0x1
// // [phyinit_C_initPhyConfig] Pstate=0, Memclk=1600MHz, Programming DqsPreambleControl to 0xe3
dwc_ddrphy_apb_wr(0x20024,0xe3); // DWC_DDRPHYA_MASTER0_DqsPreambleControl_p0
// // [phyinit_C_initPhyConfig] Pstate=0, Memclk=1600MHz, Programming DbyteDllModeCntrl to 0x2
dwc_ddrphy_apb_wr(0x2003a,0x2); // DWC_DDRPHYA_MASTER0_DbyteDllModeCntrl
// // [phyinit_C_initPhyConfig] Pstate=0, Memclk=1600MHz, Programming DllLockParam to 0x212
dwc_ddrphy_apb_wr(0x2007d,0x212); // DWC_DDRPHYA_MASTER0_DllLockParam_p0
// // [phyinit_C_initPhyConfig] Pstate=0, Memclk=1600MHz, Programming DllGainCtl to 0x61
dwc_ddrphy_apb_wr(0x2007c,0x61); // DWC_DDRPHYA_MASTER0_DllGainCtl_p0
// // [phyinit_C_initPhyConfig] Pstate=0, Memclk=1600MHz, Programming ProcOdtTimeCtl to 0x3
dwc_ddrphy_apb_wr(0x20056,0x3); // DWC_DDRPHYA_MASTER0_ProcOdtTimeCtl_p0
// // [phyinit_C_initPhyConfig] Pstate=0, Memclk=1600MHz, Programming TxOdtDrvStren::ODTStrenP to 0x0
// // [phyinit_C_initPhyConfig] Pstate=0, Memclk=1600MHz, Programming TxOdtDrvStren::ODTStrenN to 0x0
dwc_ddrphy_apb_wr(0x1004d,0x0); // DWC_DDRPHYA_DBYTE0_TxOdtDrvStren_b0_p0
dwc_ddrphy_apb_wr(0x1014d,0x0); // DWC_DDRPHYA_DBYTE0_TxOdtDrvStren_b1_p0
dwc_ddrphy_apb_wr(0x1104d,0x0); // DWC_DDRPHYA_DBYTE1_TxOdtDrvStren_b0_p0
dwc_ddrphy_apb_wr(0x1114d,0x0); // DWC_DDRPHYA_DBYTE1_TxOdtDrvStren_b1_p0
dwc_ddrphy_apb_wr(0x1204d,0x0); // DWC_DDRPHYA_DBYTE2_TxOdtDrvStren_b0_p0
dwc_ddrphy_apb_wr(0x1214d,0x0); // DWC_DDRPHYA_DBYTE2_TxOdtDrvStren_b1_p0
dwc_ddrphy_apb_wr(0x1304d,0x0); // DWC_DDRPHYA_DBYTE3_TxOdtDrvStren_b0_p0
dwc_ddrphy_apb_wr(0x1314d,0x0); // DWC_DDRPHYA_DBYTE3_TxOdtDrvStren_b1_p0
// // [phyinit_C_initPhyConfig] Pstate=0, Memclk=1600MHz, Programming TxImpedanceCtrl1::DrvStrenFSDqP to 0x1f
// // [phyinit_C_initPhyConfig] Pstate=0, Memclk=1600MHz, Programming TxImpedanceCtrl1::DrvStrenFSDqN to 0x18
dwc_ddrphy_apb_wr(0x10049,0x61f); // DWC_DDRPHYA_DBYTE0_TxImpedanceCtrl1_b0_p0
dwc_ddrphy_apb_wr(0x10149,0x61f); // DWC_DDRPHYA_DBYTE0_TxImpedanceCtrl1_b1_p0
dwc_ddrphy_apb_wr(0x11049,0x61f); // DWC_DDRPHYA_DBYTE1_TxImpedanceCtrl1_b0_p0
dwc_ddrphy_apb_wr(0x11149,0x61f); // DWC_DDRPHYA_DBYTE1_TxImpedanceCtrl1_b1_p0
dwc_ddrphy_apb_wr(0x12049,0x61f); // DWC_DDRPHYA_DBYTE2_TxImpedanceCtrl1_b0_p0
dwc_ddrphy_apb_wr(0x12149,0x61f); // DWC_DDRPHYA_DBYTE2_TxImpedanceCtrl1_b1_p0
dwc_ddrphy_apb_wr(0x13049,0x61f); // DWC_DDRPHYA_DBYTE3_TxImpedanceCtrl1_b0_p0
dwc_ddrphy_apb_wr(0x13149,0x61f); // DWC_DDRPHYA_DBYTE3_TxImpedanceCtrl1_b1_p0
// // [phyinit_C_initPhyConfig] Programming ATxImpedance::ADrvStrenP to 0x1f
// // [phyinit_C_initPhyConfig] Programming ATxImpedance::ADrvStrenN to 0x3
dwc_ddrphy_apb_wr(0x43,0x7f); // DWC_DDRPHYA_ANIB0_ATxImpedance
dwc_ddrphy_apb_wr(0x1043,0x7f); // DWC_DDRPHYA_ANIB1_ATxImpedance
dwc_ddrphy_apb_wr(0x2043,0x7f); // DWC_DDRPHYA_ANIB2_ATxImpedance
dwc_ddrphy_apb_wr(0x3043,0x7f); // DWC_DDRPHYA_ANIB3_ATxImpedance
dwc_ddrphy_apb_wr(0x4043,0x7f); // DWC_DDRPHYA_ANIB4_ATxImpedance
dwc_ddrphy_apb_wr(0x5043,0x7f); // DWC_DDRPHYA_ANIB5_ATxImpedance
dwc_ddrphy_apb_wr(0x6043,0x7f); // DWC_DDRPHYA_ANIB6_ATxImpedance
dwc_ddrphy_apb_wr(0x7043,0x7f); // DWC_DDRPHYA_ANIB7_ATxImpedance
dwc_ddrphy_apb_wr(0x8043,0x7f); // DWC_DDRPHYA_ANIB8_ATxImpedance
dwc_ddrphy_apb_wr(0x9043,0x7f); // DWC_DDRPHYA_ANIB9_ATxImpedance
// // [phyinit_C_initPhyConfig] Programming DfiMode to 0x3
dwc_ddrphy_apb_wr(0x20018,0x3); // DWC_DDRPHYA_MASTER0_DfiMode
// // [phyinit_C_initPhyConfig] Programming DfiCAMode to 0x4
dwc_ddrphy_apb_wr(0x20075,0x4); // DWC_DDRPHYA_MASTER0_DfiCAMode
// // [phyinit_C_initPhyConfig] Programming CalDrvStr0::CalDrvStrPd50 to 0x0
// // [phyinit_C_initPhyConfig] Programming CalDrvStr0::CalDrvStrPu50 to 0x0
dwc_ddrphy_apb_wr(0x20050,0x0); // DWC_DDRPHYA_MASTER0_CalDrvStr0
// // [phyinit_C_initPhyConfig] Programming CalVRefs to 0x2
dwc_ddrphy_apb_wr(0x2009b,0x2); // DWC_DDRPHYA_MASTER0_CalVRefs
// // [phyinit_C_initPhyConfig] Pstate=0, Memclk=1600MHz, Programming CalUclkInfo::CalUClkTicksPer1uS to 0x320
dwc_ddrphy_apb_wr(0x20008,0x320); // DWC_DDRPHYA_MASTER0_CalUclkInfo_p0
// // [phyinit_C_initPhyConfig] Programming CalRate::CalInterval to 0x9
// // [phyinit_C_initPhyConfig] Programming CalRate::CalOnce to 0x0
dwc_ddrphy_apb_wr(0x20088,0x9); // DWC_DDRPHYA_MASTER0_CalRate
// // [phyinit_C_initPhyConfig] Pstate=0, Programming VrefInGlobal::GlobalVrefInSel to 0x4
// // [phyinit_C_initPhyConfig] Pstate=0, Programming VrefInGlobal::GlobalVrefInDAC to 0x20
// // [phyinit_C_initPhyConfig] Pstate=0, Programming VrefInGlobal to 0x104
dwc_ddrphy_apb_wr(0x200b2,0x104); // DWC_DDRPHYA_MASTER0_VrefInGlobal_p0
// // [phyinit_C_initPhyConfig] Pstate=0, Programming DqDqsRcvCntrl::MajorModeDbyte to 0x2
// // [phyinit_C_initPhyConfig] Pstate=0, Programming DqDqsRcvCntrl to 0x5a1
dwc_ddrphy_apb_wr(0x10043,0x5a1); // DWC_DDRPHYA_DBYTE0_DqDqsRcvCntrl_b0_p0
dwc_ddrphy_apb_wr(0x10143,0x5a1); // DWC_DDRPHYA_DBYTE0_DqDqsRcvCntrl_b1_p0
dwc_ddrphy_apb_wr(0x11043,0x5a1); // DWC_DDRPHYA_DBYTE1_DqDqsRcvCntrl_b0_p0
dwc_ddrphy_apb_wr(0x11143,0x5a1); // DWC_DDRPHYA_DBYTE1_DqDqsRcvCntrl_b1_p0
dwc_ddrphy_apb_wr(0x12043,0x5a1); // DWC_DDRPHYA_DBYTE2_DqDqsRcvCntrl_b0_p0
dwc_ddrphy_apb_wr(0x12143,0x5a1); // DWC_DDRPHYA_DBYTE2_DqDqsRcvCntrl_b1_p0
dwc_ddrphy_apb_wr(0x13043,0x5a1); // DWC_DDRPHYA_DBYTE3_DqDqsRcvCntrl_b0_p0
dwc_ddrphy_apb_wr(0x13143,0x5a1); // DWC_DDRPHYA_DBYTE3_DqDqsRcvCntrl_b1_p0
// // [phyinit_C_initPhyConfig] Pstate=0, Memclk=1600MHz, Programming DfiFreqRatio_p0 to 0x1
dwc_ddrphy_apb_wr(0x200fa,0x1); // DWC_DDRPHYA_MASTER0_DfiFreqRatio_p0
// // [phyinit_C_initPhyConfig] Pstate=0, Memclk=1600MHz, Programming TristateModeCA::DisDynAdrTri_p0 to 0x1
// // [phyinit_C_initPhyConfig] Pstate=0, Memclk=1600MHz, Programming TristateModeCA::DDR2TMode_p0 to 0x0
dwc_ddrphy_apb_wr(0x20019,0x1); // DWC_DDRPHYA_MASTER0_TristateModeCA_p0
// // [phyinit_C_initPhyConfig] Programming DfiFreqXlat*
dwc_ddrphy_apb_wr(0x200f0,0x1111); // DWC_DDRPHYA_MASTER0_DfiFreqXlat0
dwc_ddrphy_apb_wr(0x200f1,0x0); // DWC_DDRPHYA_MASTER0_DfiFreqXlat1
dwc_ddrphy_apb_wr(0x200f2,0x4444); // DWC_DDRPHYA_MASTER0_DfiFreqXlat2
dwc_ddrphy_apb_wr(0x200f3,0x8888); // DWC_DDRPHYA_MASTER0_DfiFreqXlat3
dwc_ddrphy_apb_wr(0x200f4,0x6666); // DWC_DDRPHYA_MASTER0_DfiFreqXlat4
dwc_ddrphy_apb_wr(0x200f5,0x0); // DWC_DDRPHYA_MASTER0_DfiFreqXlat5
dwc_ddrphy_apb_wr(0x200f6,0x0); // DWC_DDRPHYA_MASTER0_DfiFreqXlat6
dwc_ddrphy_apb_wr(0x200f7,0xf000); // DWC_DDRPHYA_MASTER0_DfiFreqXlat7
// // [phyinit_C_initPhyConfig] Disabling Lane 8 Receiver to save power.0
dwc_ddrphy_apb_wr(0x1004a,0x500); // DWC_DDRPHYA_DBYTE0_DqDqsRcvCntrl1
// // [phyinit_C_initPhyConfig] Disabling Lane 8 Receiver to save power.1
dwc_ddrphy_apb_wr(0x1104a,0x500); // DWC_DDRPHYA_DBYTE1_DqDqsRcvCntrl1
// // [phyinit_C_initPhyConfig] Disabling Lane 8 Receiver to save power.2
dwc_ddrphy_apb_wr(0x1204a,0x500); // DWC_DDRPHYA_DBYTE2_DqDqsRcvCntrl1
// // [phyinit_C_initPhyConfig] Disabling Lane 8 Receiver to save power.3
dwc_ddrphy_apb_wr(0x1304a,0x500); // DWC_DDRPHYA_DBYTE3_DqDqsRcvCntrl1
// // [phyinit_C_initPhyConfig] Programming MasterX4Config::X4TG to 0x0
dwc_ddrphy_apb_wr(0x20025,0x0); // DWC_DDRPHYA_MASTER0_MasterX4Config
// // [phyinit_C_initPhyConfig] Pstate=0, Memclk=1600MHz, Programming DMIPinPresent::RdDbiEnabled to 0x0
dwc_ddrphy_apb_wr(0x2002d,0x0); // DWC_DDRPHYA_MASTER0_DMIPinPresent_p0
dwc_ddrphy_apb_wr(0x2002c,0x0); // DWC_DDRPHYA_MASTER0_Acx4AnibDis
// // [phyinit_C_initPhyConfig] End of dwc_ddrphy_phyinit_C_initPhyConfig()
// 
// 
// //##############################################################
// //
// // dwc_ddrphy_phyihunit_userCustom_customPreTrain is a user-editable function.
// //
// // See PhyInit App Note for detailed description and function usage
// //
// //##############################################################
// 
// // [phyinit_userCustom_customPreTrain] Start of dwc_ddrphy_phyinit_userCustom_customPreTrain()
// // [phyinit_userCustom_customPreTrain] End of dwc_ddrphy_phyinit_userCustom_customPreTrain()


// //##############################################################
// //
// // Training firmware is *NOT* executed. This function replaces these steps
// // in the PHY Initialization sequence:
// //
// //  (E) Set the PHY input clocks to the desired frequency 
// //  (F) Write the Message Block parameters for the training firmware 
// //  (G) Execute the Training Firmware 
// //  (H) Read the Message Block results
// //
// //##############################################################


// [dwc_ddrphy_phyinit_progCsrSkipTrain] Start of dwc_ddrphy_phyinit_progCsrSkipTrain()
// [dwc_ddrphy_phyinit_progCsrSkipTrain] NumRank_total = 2
// [dwc_ddrphy_phyinit_progCsrSkipTrain] PHY_Rx_Fifo_Dly = 1450
// [dwc_ddrphy_phyinit_progCsrSkipTrain] PHY_Tx_Insertion_Dly = 200
// [dwc_ddrphy_phyinit_progCsrSkipTrain] PHY_Rx_Insertion_Dly = 200
// [dwc_ddrphy_phyinit_progCsrSkipTrain] Pstate=0, Memclk=1600MHz, Programming DFIMRL to 0x6
// [dwc_ddrphy_phyinit_progCsrSkipTrain] Pstate=0, Memclk=1600MHz, Programming HwtMRL to 0x6
dwc_ddrphy_apb_wr(0x10020,0x6); // DWC_DDRPHYA_DBYTE0_DFIMRL_p0
dwc_ddrphy_apb_wr(0x11020,0x6); // DWC_DDRPHYA_DBYTE1_DFIMRL_p0
dwc_ddrphy_apb_wr(0x12020,0x6); // DWC_DDRPHYA_DBYTE2_DFIMRL_p0
dwc_ddrphy_apb_wr(0x13020,0x6); // DWC_DDRPHYA_DBYTE3_DFIMRL_p0
dwc_ddrphy_apb_wr(0x20020,0x6); // DWC_DDRPHYA_MASTER0_HwtMRL_p0
// [dwc_ddrphy_phyinit_progCsrSkipTrain] Pstate=0, Memclk=1600MHz, Programming TxDqsDlyTg0 to 0x100
dwc_ddrphy_apb_wr(0x100d0,0x100); // DWC_DDRPHYA_DBYTE0_TxDqsDlyTg0_u0_p0
dwc_ddrphy_apb_wr(0x101d0,0x100); // DWC_DDRPHYA_DBYTE0_TxDqsDlyTg0_u1_p0
dwc_ddrphy_apb_wr(0x110d0,0x100); // DWC_DDRPHYA_DBYTE1_TxDqsDlyTg0_u0_p0
dwc_ddrphy_apb_wr(0x111d0,0x100); // DWC_DDRPHYA_DBYTE1_TxDqsDlyTg0_u1_p0
dwc_ddrphy_apb_wr(0x120d0,0x100); // DWC_DDRPHYA_DBYTE2_TxDqsDlyTg0_u0_p0
dwc_ddrphy_apb_wr(0x121d0,0x100); // DWC_DDRPHYA_DBYTE2_TxDqsDlyTg0_u1_p0
dwc_ddrphy_apb_wr(0x130d0,0x100); // DWC_DDRPHYA_DBYTE3_TxDqsDlyTg0_u0_p0
dwc_ddrphy_apb_wr(0x131d0,0x100); // DWC_DDRPHYA_DBYTE3_TxDqsDlyTg0_u1_p0
// [dwc_ddrphy_phyinit_progCsrSkipTrain] Pstate=0, Memclk=1600MHz, Programming TxDqDlyTg0 to 0x45
dwc_ddrphy_apb_wr(0x100c0,0x45); // DWC_DDRPHYA_DBYTE0_TxDqDlyTg0_r0_p0
dwc_ddrphy_apb_wr(0x101c0,0x45); // DWC_DDRPHYA_DBYTE0_TxDqDlyTg0_r1_p0
dwc_ddrphy_apb_wr(0x102c0,0x45); // DWC_DDRPHYA_DBYTE0_TxDqDlyTg0_r2_p0
dwc_ddrphy_apb_wr(0x103c0,0x45); // DWC_DDRPHYA_DBYTE0_TxDqDlyTg0_r3_p0
dwc_ddrphy_apb_wr(0x104c0,0x45); // DWC_DDRPHYA_DBYTE0_TxDqDlyTg0_r4_p0
dwc_ddrphy_apb_wr(0x105c0,0x45); // DWC_DDRPHYA_DBYTE0_TxDqDlyTg0_r5_p0
dwc_ddrphy_apb_wr(0x106c0,0x45); // DWC_DDRPHYA_DBYTE0_TxDqDlyTg0_r6_p0
dwc_ddrphy_apb_wr(0x107c0,0x45); // DWC_DDRPHYA_DBYTE0_TxDqDlyTg0_r7_p0
dwc_ddrphy_apb_wr(0x108c0,0x45); // DWC_DDRPHYA_DBYTE0_TxDqDlyTg0_r8_p0
dwc_ddrphy_apb_wr(0x110c0,0x45); // DWC_DDRPHYA_DBYTE1_TxDqDlyTg0_r0_p0
dwc_ddrphy_apb_wr(0x111c0,0x45); // DWC_DDRPHYA_DBYTE1_TxDqDlyTg0_r1_p0
dwc_ddrphy_apb_wr(0x112c0,0x45); // DWC_DDRPHYA_DBYTE1_TxDqDlyTg0_r2_p0
dwc_ddrphy_apb_wr(0x113c0,0x45); // DWC_DDRPHYA_DBYTE1_TxDqDlyTg0_r3_p0
dwc_ddrphy_apb_wr(0x114c0,0x45); // DWC_DDRPHYA_DBYTE1_TxDqDlyTg0_r4_p0
dwc_ddrphy_apb_wr(0x115c0,0x45); // DWC_DDRPHYA_DBYTE1_TxDqDlyTg0_r5_p0
dwc_ddrphy_apb_wr(0x116c0,0x45); // DWC_DDRPHYA_DBYTE1_TxDqDlyTg0_r6_p0
dwc_ddrphy_apb_wr(0x117c0,0x45); // DWC_DDRPHYA_DBYTE1_TxDqDlyTg0_r7_p0
dwc_ddrphy_apb_wr(0x118c0,0x45); // DWC_DDRPHYA_DBYTE1_TxDqDlyTg0_r8_p0
dwc_ddrphy_apb_wr(0x120c0,0x45); // DWC_DDRPHYA_DBYTE2_TxDqDlyTg0_r0_p0
dwc_ddrphy_apb_wr(0x121c0,0x45); // DWC_DDRPHYA_DBYTE2_TxDqDlyTg0_r1_p0
dwc_ddrphy_apb_wr(0x122c0,0x45); // DWC_DDRPHYA_DBYTE2_TxDqDlyTg0_r2_p0
dwc_ddrphy_apb_wr(0x123c0,0x45); // DWC_DDRPHYA_DBYTE2_TxDqDlyTg0_r3_p0
dwc_ddrphy_apb_wr(0x124c0,0x45); // DWC_DDRPHYA_DBYTE2_TxDqDlyTg0_r4_p0
dwc_ddrphy_apb_wr(0x125c0,0x45); // DWC_DDRPHYA_DBYTE2_TxDqDlyTg0_r5_p0
dwc_ddrphy_apb_wr(0x126c0,0x45); // DWC_DDRPHYA_DBYTE2_TxDqDlyTg0_r6_p0
dwc_ddrphy_apb_wr(0x127c0,0x45); // DWC_DDRPHYA_DBYTE2_TxDqDlyTg0_r7_p0
dwc_ddrphy_apb_wr(0x128c0,0x45); // DWC_DDRPHYA_DBYTE2_TxDqDlyTg0_r8_p0
dwc_ddrphy_apb_wr(0x130c0,0x45); // DWC_DDRPHYA_DBYTE3_TxDqDlyTg0_r0_p0
dwc_ddrphy_apb_wr(0x131c0,0x45); // DWC_DDRPHYA_DBYTE3_TxDqDlyTg0_r1_p0
dwc_ddrphy_apb_wr(0x132c0,0x45); // DWC_DDRPHYA_DBYTE3_TxDqDlyTg0_r2_p0
dwc_ddrphy_apb_wr(0x133c0,0x45); // DWC_DDRPHYA_DBYTE3_TxDqDlyTg0_r3_p0
dwc_ddrphy_apb_wr(0x134c0,0x45); // DWC_DDRPHYA_DBYTE3_TxDqDlyTg0_r4_p0
dwc_ddrphy_apb_wr(0x135c0,0x45); // DWC_DDRPHYA_DBYTE3_TxDqDlyTg0_r5_p0
dwc_ddrphy_apb_wr(0x136c0,0x45); // DWC_DDRPHYA_DBYTE3_TxDqDlyTg0_r6_p0
dwc_ddrphy_apb_wr(0x137c0,0x45); // DWC_DDRPHYA_DBYTE3_TxDqDlyTg0_r7_p0
dwc_ddrphy_apb_wr(0x138c0,0x45); // DWC_DDRPHYA_DBYTE3_TxDqDlyTg0_r8_p0
// [dwc_ddrphy_phyinit_progCsrSkipTrain] Pstate=0, Memclk=1600MHz, Programming RxEnDly_10to6=9, Rxendly_5to0=17
// [dwc_ddrphy_phyinit_progCsrSkipTrain] Pstate=0, Memclk=1600MHz, Programming RxEnDlyTg0 to 0x251
dwc_ddrphy_apb_wr(0x10080,0x251); // DWC_DDRPHYA_DBYTE0_RxEnDlyTg0_u0_p0
dwc_ddrphy_apb_wr(0x10180,0x251); // DWC_DDRPHYA_DBYTE0_RxEnDlyTg0_u1_p0
dwc_ddrphy_apb_wr(0x11080,0x251); // DWC_DDRPHYA_DBYTE1_RxEnDlyTg0_u0_p0
dwc_ddrphy_apb_wr(0x11180,0x251); // DWC_DDRPHYA_DBYTE1_RxEnDlyTg0_u1_p0
dwc_ddrphy_apb_wr(0x12080,0x251); // DWC_DDRPHYA_DBYTE2_RxEnDlyTg0_u0_p0
dwc_ddrphy_apb_wr(0x12180,0x251); // DWC_DDRPHYA_DBYTE2_RxEnDlyTg0_u1_p0
dwc_ddrphy_apb_wr(0x13080,0x251); // DWC_DDRPHYA_DBYTE3_RxEnDlyTg0_u0_p0
dwc_ddrphy_apb_wr(0x13180,0x251); // DWC_DDRPHYA_DBYTE3_RxEnDlyTg0_u1_p0
// [dwc_ddrphy_phyinit_progCsrSkipTrain] Pstate=0, Programming PIE RL=28 WL=14
dwc_ddrphy_apb_wr(0x90201,0x1a00); // DWC_DDRPHYA_INITENG0_Seq0BGPR1_p0
dwc_ddrphy_apb_wr(0x90202,0xc); // DWC_DDRPHYA_INITENG0_Seq0BGPR2_p0
dwc_ddrphy_apb_wr(0x90203,0x2600); // DWC_DDRPHYA_INITENG0_Seq0BGPR3_p0
// [dwc_ddrphy_phyinit_progCsrSkipTrain] Programming HwtLpCsEnA to 0x1
dwc_ddrphy_apb_wr(0x20072,0x1); // DWC_DDRPHYA_MASTER0_HwtLpCsEnA
// [dwc_ddrphy_phyinit_progCsrSkipTrain] Programming HwtLpCsEnB to 0x1
dwc_ddrphy_apb_wr(0x20073,0x1); // DWC_DDRPHYA_MASTER0_HwtLpCsEnB
// [dwc_ddrphy_phyinit_progCsrSkipTrain] Pstate=0, Memclk=1600MHz, Programming PptDqsCntInvTrnTg0 to 0x15
dwc_ddrphy_apb_wr(0x100ae,0x15); // DWC_DDRPHYA_DBYTE0_PptDqsCntInvTrnTg0_p0
dwc_ddrphy_apb_wr(0x110ae,0x15); // DWC_DDRPHYA_DBYTE1_PptDqsCntInvTrnTg0_p0
dwc_ddrphy_apb_wr(0x120ae,0x15); // DWC_DDRPHYA_DBYTE2_PptDqsCntInvTrnTg0_p0
dwc_ddrphy_apb_wr(0x130ae,0x15); // DWC_DDRPHYA_DBYTE3_PptDqsCntInvTrnTg0_p0
// [dwc_ddrphy_phyinit_progCsrSkipTrain] Pstate=0, Memclk=1600MHz, Programming PptDqsCntInvTrnTg1 to 0x15
dwc_ddrphy_apb_wr(0x100af,0x15); // DWC_DDRPHYA_DBYTE0_PptDqsCntInvTrnTg1_p0
dwc_ddrphy_apb_wr(0x110af,0x15); // DWC_DDRPHYA_DBYTE1_PptDqsCntInvTrnTg1_p0
dwc_ddrphy_apb_wr(0x120af,0x15); // DWC_DDRPHYA_DBYTE2_PptDqsCntInvTrnTg1_p0
dwc_ddrphy_apb_wr(0x130af,0x15); // DWC_DDRPHYA_DBYTE3_PptDqsCntInvTrnTg1_p0
// [dwc_ddrphy_phyinit_progCsrSkipTrain] Programming PptCtlStatic CSR
dwc_ddrphy_apb_wr(0x100aa,0x501); // DWC_DDRPHYA_DBYTE0_PptCtlStatic
dwc_ddrphy_apb_wr(0x110aa,0x50d); // DWC_DDRPHYA_DBYTE1_PptCtlStatic
dwc_ddrphy_apb_wr(0x120aa,0x501); // DWC_DDRPHYA_DBYTE2_PptCtlStatic
dwc_ddrphy_apb_wr(0x130aa,0x50d); // DWC_DDRPHYA_DBYTE3_PptCtlStatic
// [dwc_ddrphy_phyinit_progCsrSkipTrain] Programming HwtCAMode to 0x34
dwc_ddrphy_apb_wr(0x20077,0x34); // DWC_DDRPHYA_MASTER0_HwtCAMode
// [dwc_ddrphy_phyinit_progCsrSkipTrain] Pstate=0, Memclk=1600MHz, Programming DllGainCtl::DllGainIV=0x4, DllGainTV=0x5
// [dwc_ddrphy_phyinit_progCsrSkipTrain] Pstate=0, Memclk=1600MHz, Programming DllGainCtl to 0x54
dwc_ddrphy_apb_wr(0x2007c,0x54); // DWC_DDRPHYA_MASTER0_DllGainCtl_p0
// [dwc_ddrphy_phyinit_progCsrSkipTrain] Pstate=0, Memclk=1600MHz, Programming DllLockParam::LcdlSeed0 to 63 
// [dwc_ddrphy_phyinit_progCsrSkipTrain] Pstate=0, Memclk=1600MHz, Programming DllLockParam to 0x3f2
dwc_ddrphy_apb_wr(0x2007d,0x3f2); // DWC_DDRPHYA_MASTER0_DllLockParam_p0
// [dwc_ddrphy_phyinit_progCsrSkipTrain] Programming AcsmCtrl23 to 0x10f
dwc_ddrphy_apb_wr(0x400c0,0x10f); // DWC_DDRPHYA_ACSM0_AcsmCtrl23
// [dwc_ddrphy_phyinit_progCsrSkipTrain] Programming PllCtrl3::PllDacValIn to 0x10
// [dwc_ddrphy_phyinit_progCsrSkipTrain] Programming PllCtrl3::PllForceCal to 0x1
// [dwc_ddrphy_phyinit_progCsrSkipTrain] Programming PllCtrl3::PllMaxRange to 0x1f
// [dwc_ddrphy_phyinit_progCsrSkipTrain] Programming PllCtrl3 to 0x61f0
dwc_ddrphy_apb_wr(0x200cb,0x61f0); // DWC_DDRPHYA_MASTER0_PllCtrl3
// [dwc_ddrphy_phyinit_progCsrSkipTrain] End of dwc_ddrphy_phyinit_progCsrSkipTrain()
// // [dwc_ddrphy_phyinit_D_loadIMEM, 1D] Start of dwc_ddrphy_phyinit_D_loadIMEM (Train2D=0)
// 
// 
// //##############################################################
// //
// // (D) Load the 1D IMEM image
// // 
// // This function loads the training firmware IMEM image into the SRAM.
// // See PhyInit App Note for detailed description and function usage
// // 
// //##############################################################
// 
// 
// // [dwc_ddrphy_phyinit_D_loadIMEM, 1D] Programming MemResetL to 0x2
dwc_ddrphy_apb_wr(0x20060,0x2); // DWC_DDRPHYA_MASTER0_MemResetL
// [dwc_ddrphy_phyinit_storeIncvFile] Reading input file: /eda/synopsys/DesignWare/dwc_lpddr4x_multiphy_tsmc12ffc18_3.30a/synopsys/dwc_lpddr4x_multiphy_tsmc12ffc18/3.30a/firmware/A-2018.10//lpddr4/lpddr4_pmu_train_imem.incv

// // 1.	Enable access to the internal CSRs by setting the MicroContMuxSel CSR to 0.
// //       This allows the memory controller unrestricted access to the configuration CSRs. 
dwc_ddrphy_apb_wr(0xd0000,0x0); //DWC_DDRPHYA_APBONLY0_MicroContMuxSel

dwc_ddrphy_apb_wr(0x10068,0x007F);
dwc_ddrphy_apb_wr(0x10069,0x007F);
dwc_ddrphy_apb_wr(0x1006A,0x007F);
dwc_ddrphy_apb_wr(0x1006B,0x007F);
dwc_ddrphy_apb_wr(0x10168,0x007F);
dwc_ddrphy_apb_wr(0x10169,0x007F);
dwc_ddrphy_apb_wr(0x1016A,0x007F);
dwc_ddrphy_apb_wr(0x1016B,0x007F);
dwc_ddrphy_apb_wr(0x10268,0x007F);
dwc_ddrphy_apb_wr(0x10269,0x007F);
dwc_ddrphy_apb_wr(0x1026A,0x007F);
dwc_ddrphy_apb_wr(0x1026B,0x007F);
dwc_ddrphy_apb_wr(0x10368,0x007F);
dwc_ddrphy_apb_wr(0x10369,0x007F);
dwc_ddrphy_apb_wr(0x1036A,0x007F);
dwc_ddrphy_apb_wr(0x1036B,0x007F);
dwc_ddrphy_apb_wr(0x10468,0x007F);
dwc_ddrphy_apb_wr(0x10469,0x007F);
dwc_ddrphy_apb_wr(0x1046A,0x007F);
dwc_ddrphy_apb_wr(0x1046B,0x007F);
dwc_ddrphy_apb_wr(0x10568,0x007F);
dwc_ddrphy_apb_wr(0x10569,0x007F);
dwc_ddrphy_apb_wr(0x1056A,0x007F);
dwc_ddrphy_apb_wr(0x1056B,0x007F);
dwc_ddrphy_apb_wr(0x10668,0x007F);
dwc_ddrphy_apb_wr(0x10669,0x007F);
dwc_ddrphy_apb_wr(0x1066A,0x007F);
dwc_ddrphy_apb_wr(0x1066B,0x007F);
dwc_ddrphy_apb_wr(0x10768,0x007F);
dwc_ddrphy_apb_wr(0x10769,0x007F);
dwc_ddrphy_apb_wr(0x1076A,0x007F);
dwc_ddrphy_apb_wr(0x1076B,0x007F);
dwc_ddrphy_apb_wr(0x10868,0x007F);
dwc_ddrphy_apb_wr(0x10869,0x007F);
dwc_ddrphy_apb_wr(0x1086A,0x007F);
dwc_ddrphy_apb_wr(0x1086B,0x007F);

dwc_ddrphy_apb_wr(0x11068,0x007F);
dwc_ddrphy_apb_wr(0x11069,0x007F);
dwc_ddrphy_apb_wr(0x1106A,0x007F);
dwc_ddrphy_apb_wr(0x1106B,0x007F);
dwc_ddrphy_apb_wr(0x11168,0x007F);
dwc_ddrphy_apb_wr(0x11169,0x007F);
dwc_ddrphy_apb_wr(0x1116A,0x007F);
dwc_ddrphy_apb_wr(0x1116B,0x007F);
dwc_ddrphy_apb_wr(0x11268,0x007F);
dwc_ddrphy_apb_wr(0x11269,0x007F);
dwc_ddrphy_apb_wr(0x1126A,0x007F);
dwc_ddrphy_apb_wr(0x1126B,0x007F);
dwc_ddrphy_apb_wr(0x11368,0x007F);
dwc_ddrphy_apb_wr(0x11369,0x007F);
dwc_ddrphy_apb_wr(0x1136A,0x007F);
dwc_ddrphy_apb_wr(0x1136B,0x007F);
dwc_ddrphy_apb_wr(0x11468,0x007F);
dwc_ddrphy_apb_wr(0x11469,0x007F);
dwc_ddrphy_apb_wr(0x1146A,0x007F);
dwc_ddrphy_apb_wr(0x1146B,0x007F);
dwc_ddrphy_apb_wr(0x11568,0x007F);
dwc_ddrphy_apb_wr(0x11569,0x007F);
dwc_ddrphy_apb_wr(0x1156A,0x007F);
dwc_ddrphy_apb_wr(0x1156B,0x007F);
dwc_ddrphy_apb_wr(0x11668,0x007F);
dwc_ddrphy_apb_wr(0x11669,0x007F);
dwc_ddrphy_apb_wr(0x1166A,0x007F);
dwc_ddrphy_apb_wr(0x1166B,0x007F);
dwc_ddrphy_apb_wr(0x11768,0x007F);
dwc_ddrphy_apb_wr(0x11769,0x007F);
dwc_ddrphy_apb_wr(0x1176A,0x007F);
dwc_ddrphy_apb_wr(0x1176B,0x007F);
dwc_ddrphy_apb_wr(0x11868,0x007F);
dwc_ddrphy_apb_wr(0x11869,0x007F);
dwc_ddrphy_apb_wr(0x1186A,0x007F);
dwc_ddrphy_apb_wr(0x1186B,0x007F);

dwc_ddrphy_apb_wr(0x12068,0x007F);
dwc_ddrphy_apb_wr(0x12069,0x007F);
dwc_ddrphy_apb_wr(0x1206A,0x007F);
dwc_ddrphy_apb_wr(0x1206B,0x007F);
dwc_ddrphy_apb_wr(0x12168,0x007F);
dwc_ddrphy_apb_wr(0x12169,0x007F);
dwc_ddrphy_apb_wr(0x1216A,0x007F);
dwc_ddrphy_apb_wr(0x1216B,0x007F);
dwc_ddrphy_apb_wr(0x12268,0x007F);
dwc_ddrphy_apb_wr(0x12269,0x007F);
dwc_ddrphy_apb_wr(0x1226A,0x007F);
dwc_ddrphy_apb_wr(0x1226B,0x007F);
dwc_ddrphy_apb_wr(0x12368,0x007F);
dwc_ddrphy_apb_wr(0x12369,0x007F);
dwc_ddrphy_apb_wr(0x1236A,0x007F);
dwc_ddrphy_apb_wr(0x1236B,0x007F);
dwc_ddrphy_apb_wr(0x12468,0x007F);
dwc_ddrphy_apb_wr(0x12469,0x007F);
dwc_ddrphy_apb_wr(0x1246A,0x007F);
dwc_ddrphy_apb_wr(0x1246B,0x007F);
dwc_ddrphy_apb_wr(0x12568,0x007F);
dwc_ddrphy_apb_wr(0x12569,0x007F);
dwc_ddrphy_apb_wr(0x1256A,0x007F);
dwc_ddrphy_apb_wr(0x1256B,0x007F);
dwc_ddrphy_apb_wr(0x12668,0x007F);
dwc_ddrphy_apb_wr(0x12669,0x007F);
dwc_ddrphy_apb_wr(0x1266A,0x007F);
dwc_ddrphy_apb_wr(0x1266B,0x007F);
dwc_ddrphy_apb_wr(0x12768,0x007F);
dwc_ddrphy_apb_wr(0x12769,0x007F);
dwc_ddrphy_apb_wr(0x1276A,0x007F);
dwc_ddrphy_apb_wr(0x1276B,0x007F);
dwc_ddrphy_apb_wr(0x12868,0x007F);
dwc_ddrphy_apb_wr(0x12869,0x007F);
dwc_ddrphy_apb_wr(0x1286A,0x007F);
dwc_ddrphy_apb_wr(0x1286B,0x007F);

dwc_ddrphy_apb_wr(0x13068,0x007F);
dwc_ddrphy_apb_wr(0x13069,0x007F);
dwc_ddrphy_apb_wr(0x1306A,0x007F);
dwc_ddrphy_apb_wr(0x1306B,0x007F);
dwc_ddrphy_apb_wr(0x13168,0x007F);
dwc_ddrphy_apb_wr(0x13169,0x007F);
dwc_ddrphy_apb_wr(0x1316A,0x007F);
dwc_ddrphy_apb_wr(0x1316B,0x007F);
dwc_ddrphy_apb_wr(0x13268,0x007F);
dwc_ddrphy_apb_wr(0x13269,0x007F);
dwc_ddrphy_apb_wr(0x1326A,0x007F);
dwc_ddrphy_apb_wr(0x1326B,0x007F);
dwc_ddrphy_apb_wr(0x13368,0x007F);
dwc_ddrphy_apb_wr(0x13369,0x007F);
dwc_ddrphy_apb_wr(0x1336A,0x007F);
dwc_ddrphy_apb_wr(0x1336B,0x007F);
dwc_ddrphy_apb_wr(0x13468,0x007F);
dwc_ddrphy_apb_wr(0x13469,0x007F);
dwc_ddrphy_apb_wr(0x1346A,0x007F);
dwc_ddrphy_apb_wr(0x1346B,0x007F);
dwc_ddrphy_apb_wr(0x13568,0x007F);
dwc_ddrphy_apb_wr(0x13569,0x007F);
dwc_ddrphy_apb_wr(0x1356A,0x007F);
dwc_ddrphy_apb_wr(0x1356B,0x007F);
dwc_ddrphy_apb_wr(0x13668,0x007F);
dwc_ddrphy_apb_wr(0x13669,0x007F);
dwc_ddrphy_apb_wr(0x1366A,0x007F);
dwc_ddrphy_apb_wr(0x1366B,0x007F);
dwc_ddrphy_apb_wr(0x13768,0x007F);
dwc_ddrphy_apb_wr(0x13769,0x007F);
dwc_ddrphy_apb_wr(0x1376A,0x007F);
dwc_ddrphy_apb_wr(0x1376B,0x007F);
dwc_ddrphy_apb_wr(0x13868,0x007F);
dwc_ddrphy_apb_wr(0x13869,0x007F);
dwc_ddrphy_apb_wr(0x1386A,0x007F);
dwc_ddrphy_apb_wr(0x1386B,0x007F);


dwc_ddrphy_apb_wr(0xd0000,0x1); //DWC_DDRPHYA_APBONLY0_MicroContMuxSel

dwc_ddrphy_apb_wr(0xd0000,0x0); // DWC_DDRPHYA_APBONLY0_MicroContMuxSel
// // [dwc_ddrphy_phyinit_WriteOutMem] STARTING. offset 0x50000 size 0x4000
//CSTAMP(0xABBBBBBB);
#ifdef NO_QUICK_SIM
//CSTAMP(0xABBBBBB1);
dwc_ddrphy_phyinit_D_loadIMEM (0);   
#endif

//CSTAMP(0xAABBBBBB);
// // [dwc_ddrphy_phyinit_WriteOutMem] DONE.  Index 0x4000
// // 2.	Isolate the APB access from the internal CSRs by setting the MicroContMuxSel CSR to 1. 
// //      This allows the firmware unrestricted access to the configuration CSRs. 
dwc_ddrphy_apb_wr(0xd0000,0x1); // DWC_DDRPHYA_APBONLY0_MicroContMuxSel
// // [dwc_ddrphy_phyinit_D_loadIMEM, 1D] End of dwc_ddrphy_phyinit_D_loadIMEM()
// 
// 
// //##############################################################
// //
// // Step (E) Set the PHY input clocks to the desired frequency for pstate 0 
// // 
// // See PhyInit App Note for detailed description and function usage
// // 
// //##############################################################
// 
//CSTAMP(0xFFFF0003);
//CSTAMP(0x11000013);
dwc_ddrphy_phyinit_userCustom_E_setDfiClk (0);

// 
// // [dwc_ddrphy_phyinit_userCustom_E_setDfiClk] End of dwc_ddrphy_phyinit_userCustom_E_setDfiClk()
// // [phyinit_F_loadDMEM, 1D] Start of dwc_ddrphy_phyinit_F_loadDMEM (pstate=0, Train2D=0)
// 
// 
// //##############################################################
// //
// // (F) Load the 1D DMEM image and write the 1D Message Block parameters for the training firmware 
// // 
// // See PhyInit App Note for detailed description and function usage
// // 
// //##############################################################
// 
// [dwc_ddrphy_phyinit_storeIncvFile] Reading input file: /eda/synopsys/DesignWare/dwc_lpddr4x_multiphy_tsmc12ffc18_3.30a/synopsys/dwc_lpddr4x_multiphy_tsmc12ffc18/3.30a/firmware/A-2018.10//lpddr4/lpddr4_pmu_train_dmem.incv

// // 1.	Enable access to the internal CSRs by setting the MicroContMuxSel CSR to 0.
// //       This allows the memory controller unrestricted access to the configuration CSRs. 
dwc_ddrphy_apb_wr(0xd0000,0x0); // DWC_DDRPHYA_APBONLY0_MicroContMuxSel
// // [dwc_ddrphy_phyinit_WriteOutMem] STARTING. offset 0x54000 size 0x342
//CSTAMP(0xBFFF0000);
#ifdef NO_QUICK_SIM
dwc_ddrphy_phyinit_F_loadDMEM (0,0);
//CSTAMP(0xAFFF0000);

dwc_ddrphy_apb_wr(0x54000,0x600);
dwc_ddrphy_apb_wr(0x54001,0x0);
dwc_ddrphy_apb_wr(0x54002,0x100);
dwc_ddrphy_apb_wr(0x54003,0xc80);
dwc_ddrphy_apb_wr(0x54004,0x2);
dwc_ddrphy_apb_wr(0x54005,0x0);
dwc_ddrphy_apb_wr(0x54006,0x14);
dwc_ddrphy_apb_wr(0x54007,0x0);
dwc_ddrphy_apb_wr(0x54008,0x1);
dwc_ddrphy_apb_wr(0x54009,0xc8);
dwc_ddrphy_apb_wr(0x5400a,0x0);
dwc_ddrphy_apb_wr(0x5400b,0x2);
dwc_ddrphy_apb_wr(0x5400c,0x0);
dwc_ddrphy_apb_wr(0x5400d,0x0);
dwc_ddrphy_apb_wr(0x5400e,0x0);
dwc_ddrphy_apb_wr(0x5400f,0x100);
dwc_ddrphy_apb_wr(0x54010,0x0);
dwc_ddrphy_apb_wr(0x54011,0x0);
//dwc_ddrphy_apb_wr(0x54012,0x110);
dwc_ddrphy_apb_wr(0x54012,0x310);
dwc_ddrphy_apb_wr(0x54013,0x0);
dwc_ddrphy_apb_wr(0x54014,0x0);
dwc_ddrphy_apb_wr(0x54015,0x0);
dwc_ddrphy_apb_wr(0x54016,0x0);
dwc_ddrphy_apb_wr(0x54017,0x0);
dwc_ddrphy_apb_wr(0x54018,0x0);
dwc_ddrphy_apb_wr(0x54019,0x2d54);
dwc_ddrphy_apb_wr(0x5401a,0x3);
dwc_ddrphy_apb_wr(0x5401b,0x0);
dwc_ddrphy_apb_wr(0x5401c,0x28);
dwc_ddrphy_apb_wr(0x5401d,0x0);
dwc_ddrphy_apb_wr(0x5401e,0x0);
dwc_ddrphy_apb_wr(0x5401f,0x2d54);
dwc_ddrphy_apb_wr(0x54020,0x3);
dwc_ddrphy_apb_wr(0x54021,0x0);
dwc_ddrphy_apb_wr(0x54022,0x28);
dwc_ddrphy_apb_wr(0x54023,0x0);
dwc_ddrphy_apb_wr(0x54024,0x0);
dwc_ddrphy_apb_wr(0x54025,0x0);
dwc_ddrphy_apb_wr(0x54026,0x0);
dwc_ddrphy_apb_wr(0x54027,0x0);
dwc_ddrphy_apb_wr(0x54028,0x0);
dwc_ddrphy_apb_wr(0x54029,0x0);
dwc_ddrphy_apb_wr(0x5402a,0x0);
dwc_ddrphy_apb_wr(0x5402b,0x1000);
//dwc_ddrphy_apb_wr(0x5402c,0x1);
dwc_ddrphy_apb_wr(0x5402c,0x3);
dwc_ddrphy_apb_wr(0x5402d,0x0);
dwc_ddrphy_apb_wr(0x5402e,0x0);
dwc_ddrphy_apb_wr(0x5402f,0x0);
dwc_ddrphy_apb_wr(0x54030,0x0);
dwc_ddrphy_apb_wr(0x54031,0x0);
dwc_ddrphy_apb_wr(0x54032,0x5400);
dwc_ddrphy_apb_wr(0x54033,0x32d);
dwc_ddrphy_apb_wr(0x54034,0x0);
dwc_ddrphy_apb_wr(0x54035,0x2800);
dwc_ddrphy_apb_wr(0x54036,0x0);
dwc_ddrphy_apb_wr(0x54037,0x0);
dwc_ddrphy_apb_wr(0x54038,0x5400);
dwc_ddrphy_apb_wr(0x54039,0x32d);
dwc_ddrphy_apb_wr(0x5403a,0x0);
dwc_ddrphy_apb_wr(0x5403b,0x2800);
dwc_ddrphy_apb_wr(0x5403c,0x0);
#endif

//CSTAMP(0xAFFF0001);

// // [dwc_ddrphy_phyinit_WriteOutMem] DONE.  Index 0x342
// // 2.	Isolate the APB access from the internal CSRs by setting the MicroContMuxSel CSR to 1. 
// //      This allows the firmware unrestricted access to the configuration CSRs. 
dwc_ddrphy_apb_wr(0xd0000,0x1); // DWC_DDRPHYA_APBONLY0_MicroContMuxSel
// // [phyinit_F_loadDMEM, 1D] End of dwc_ddrphy_phyinit_F_loadDMEM()
// 
// 
// //##############################################################
// //
// // (G) Execute the Training Firmware 
// // 
// // See PhyInit App Note for detailed description and function usage
// //
// //##############################################################
// 
// 
// // 1.  Reset the firmware microcontroller by writing the MicroReset CSR to set the StallToMicro and 
// //     ResetToMicro fields to 1 (all other fields should be zero). 
// //     Then rewrite the CSR so that only the StallToMicro remains set (all other fields should be zero). 
dwc_ddrphy_apb_wr(0xd0000,0x1); // DWC_DDRPHYA_APBONLY0_MicroContMuxSel
dwc_ddrphy_apb_wr(0xd0099,0x9); // DWC_DDRPHYA_APBONLY0_MicroReset
dwc_ddrphy_apb_wr(0xd0099,0x1); // DWC_DDRPHYA_APBONLY0_MicroReset
// 
// // 2. Begin execution of the training firmware by setting the MicroReset CSR to 4'b0000. 
dwc_ddrphy_apb_wr(0xd0099,0x0); // DWC_DDRPHYA_APBONLY0_MicroReset
// 
// // 3.   Wait for the training firmware to complete by following the procedure in "uCtrl Initialization and Mailbox Messaging" 
// // [dwc_ddrphy_phyinit_userCustom_G_waitFwDone] Wait for the training firmware to complete.  Implement timeout fucntion or follow the procedure in "3.4 Running the firmware" of the Training Firmware Application Note to poll the Mailbox message.
dwc_ddrphy_phyinit_userCustom_G_waitFwDone ();

// // [dwc_ddrphy_phyinit_userCustom_G_waitFwDone] End of dwc_ddrphy_phyinit_userCustom_G_waitFwDone()
// // 4.   Halt the microcontroller." 
dwc_ddrphy_apb_wr(0xd0099,0x1); // DWC_DDRPHYA_APBONLY0_MicroReset
// // [dwc_ddrphy_phyinit_G_execFW] End of dwc_ddrphy_phyinit_G_execFW ()
// 
// 
// //##############################################################
// //
// // (H) Read the Message Block results
// // 
// // The procedure is as follows:
// // 
// //##############################################################
// 
// 
// // 1.	Enable access to the internal CSRs by setting the MicroContMuxSel CSR to 0.
dwc_ddrphy_apb_wr(0xd0000,0x0); // DWC_DDRPHYA_APBONLY0_MicroContMuxSel
// 
// 2. Read the Firmware Message Block to obtain the results from the training.
// This can be accomplished by issuing APB read commands to the DMEM addresses.
// Example:
// if (Train2D)
// { 
//   _read_2d_message_block_outputs_
// }
// else
// {
//   _read_1d_message_block_outputs_
// }
dwc_ddrphy_phyinit_userCustom_H_readMsgBlock (0);

// [dwc_ddrphy_phyinit_userCustom_H_readMsgBlock] End of dwc_ddrphy_phyinit_userCustom_H_readMsgBlock ()
// // 3.	Isolate the APB access from the internal CSRs by setting the MicroContMuxSel CSR to 1. 
dwc_ddrphy_apb_wr(0xd0000,0x1); // DWC_DDRPHYA_APBONLY0_MicroContMuxSel
// // 4.	If training is required at another frequency, repeat the operations starting at step (E). 
// // [dwc_ddrphy_phyinit_H_readMsgBlock] End of dwc_ddrphy_phyinit_H_readMsgBlock()
// // [phyinit_I_loadPIEImage] Start of dwc_ddrphy_phyinit_I_loadPIEImage()
// 
// 
// //##############################################################
// //
// // (I) Load PHY Init Engine Image 
// // 
// // Load the PHY Initialization Engine memory with the provided initialization sequence.
// // See PhyInit App Note for detailed description and function usage
// // 
// // For LPDDR3/LPDDR4, this sequence will include the necessary retraining code.
// // 
// //##############################################################
// 
// 
// // Enable access to the internal CSRs by setting the MicroContMuxSel CSR to 0. 
// // This allows the memory controller unrestricted access to the configuration CSRs. 
dwc_ddrphy_apb_wr(0xd0000,0x0); // DWC_DDRPHYA_APBONLY0_MicroContMuxSel
// // [phyinit_I_loadPIEImage] Programming PIE Production Code
dwc_ddrphy_apb_wr(0x90000,0x10); // DWC_DDRPHYA_INITENG0_PreSequenceReg0b0s0
dwc_ddrphy_apb_wr(0x90001,0x400); // DWC_DDRPHYA_INITENG0_PreSequenceReg0b0s1
dwc_ddrphy_apb_wr(0x90002,0x10e); // DWC_DDRPHYA_INITENG0_PreSequenceReg0b0s2
dwc_ddrphy_apb_wr(0x90003,0x0); // DWC_DDRPHYA_INITENG0_PreSequenceReg0b1s0
dwc_ddrphy_apb_wr(0x90004,0x0); // DWC_DDRPHYA_INITENG0_PreSequenceReg0b1s1
dwc_ddrphy_apb_wr(0x90005,0x8); // DWC_DDRPHYA_INITENG0_PreSequenceReg0b1s2
dwc_ddrphy_apb_wr(0x90029,0xb); // DWC_DDRPHYA_INITENG0_SequenceReg0b0s0
dwc_ddrphy_apb_wr(0x9002a,0x480); // DWC_DDRPHYA_INITENG0_SequenceReg0b0s1
dwc_ddrphy_apb_wr(0x9002b,0x109); // DWC_DDRPHYA_INITENG0_SequenceReg0b0s2
dwc_ddrphy_apb_wr(0x9002c,0x8); // DWC_DDRPHYA_INITENG0_SequenceReg0b1s0
dwc_ddrphy_apb_wr(0x9002d,0x448); // DWC_DDRPHYA_INITENG0_SequenceReg0b1s1
dwc_ddrphy_apb_wr(0x9002e,0x139); // DWC_DDRPHYA_INITENG0_SequenceReg0b1s2
dwc_ddrphy_apb_wr(0x9002f,0x8); // DWC_DDRPHYA_INITENG0_SequenceReg0b2s0
dwc_ddrphy_apb_wr(0x90030,0x478); // DWC_DDRPHYA_INITENG0_SequenceReg0b2s1
dwc_ddrphy_apb_wr(0x90031,0x109); // DWC_DDRPHYA_INITENG0_SequenceReg0b2s2
dwc_ddrphy_apb_wr(0x90032,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b3s0
dwc_ddrphy_apb_wr(0x90033,0xe8); // DWC_DDRPHYA_INITENG0_SequenceReg0b3s1
dwc_ddrphy_apb_wr(0x90034,0x109); // DWC_DDRPHYA_INITENG0_SequenceReg0b3s2
dwc_ddrphy_apb_wr(0x90035,0x2); // DWC_DDRPHYA_INITENG0_SequenceReg0b4s0
dwc_ddrphy_apb_wr(0x90036,0x10); // DWC_DDRPHYA_INITENG0_SequenceReg0b4s1
dwc_ddrphy_apb_wr(0x90037,0x139); // DWC_DDRPHYA_INITENG0_SequenceReg0b4s2
dwc_ddrphy_apb_wr(0x90038,0xb); // DWC_DDRPHYA_INITENG0_SequenceReg0b5s0
dwc_ddrphy_apb_wr(0x90039,0x7c0); // DWC_DDRPHYA_INITENG0_SequenceReg0b5s1
dwc_ddrphy_apb_wr(0x9003a,0x139); // DWC_DDRPHYA_INITENG0_SequenceReg0b5s2
dwc_ddrphy_apb_wr(0x9003b,0x44); // DWC_DDRPHYA_INITENG0_SequenceReg0b6s0
dwc_ddrphy_apb_wr(0x9003c,0x633); // DWC_DDRPHYA_INITENG0_SequenceReg0b6s1
dwc_ddrphy_apb_wr(0x9003d,0x159); // DWC_DDRPHYA_INITENG0_SequenceReg0b6s2
dwc_ddrphy_apb_wr(0x9003e,0x14f); // DWC_DDRPHYA_INITENG0_SequenceReg0b7s0
dwc_ddrphy_apb_wr(0x9003f,0x630); // DWC_DDRPHYA_INITENG0_SequenceReg0b7s1
dwc_ddrphy_apb_wr(0x90040,0x159); // DWC_DDRPHYA_INITENG0_SequenceReg0b7s2
dwc_ddrphy_apb_wr(0x90041,0x47); // DWC_DDRPHYA_INITENG0_SequenceReg0b8s0
dwc_ddrphy_apb_wr(0x90042,0x633); // DWC_DDRPHYA_INITENG0_SequenceReg0b8s1
dwc_ddrphy_apb_wr(0x90043,0x149); // DWC_DDRPHYA_INITENG0_SequenceReg0b8s2
dwc_ddrphy_apb_wr(0x90044,0x4f); // DWC_DDRPHYA_INITENG0_SequenceReg0b9s0
dwc_ddrphy_apb_wr(0x90045,0x633); // DWC_DDRPHYA_INITENG0_SequenceReg0b9s1
dwc_ddrphy_apb_wr(0x90046,0x179); // DWC_DDRPHYA_INITENG0_SequenceReg0b9s2
dwc_ddrphy_apb_wr(0x90047,0x8); // DWC_DDRPHYA_INITENG0_SequenceReg0b10s0
dwc_ddrphy_apb_wr(0x90048,0xe0); // DWC_DDRPHYA_INITENG0_SequenceReg0b10s1
dwc_ddrphy_apb_wr(0x90049,0x109); // DWC_DDRPHYA_INITENG0_SequenceReg0b10s2
dwc_ddrphy_apb_wr(0x9004a,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b11s0
dwc_ddrphy_apb_wr(0x9004b,0x7c8); // DWC_DDRPHYA_INITENG0_SequenceReg0b11s1
dwc_ddrphy_apb_wr(0x9004c,0x109); // DWC_DDRPHYA_INITENG0_SequenceReg0b11s2
dwc_ddrphy_apb_wr(0x9004d,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b12s0
dwc_ddrphy_apb_wr(0x9004e,0x1); // DWC_DDRPHYA_INITENG0_SequenceReg0b12s1
dwc_ddrphy_apb_wr(0x9004f,0x8); // DWC_DDRPHYA_INITENG0_SequenceReg0b12s2
dwc_ddrphy_apb_wr(0x90050,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b13s0
dwc_ddrphy_apb_wr(0x90051,0x45a); // DWC_DDRPHYA_INITENG0_SequenceReg0b13s1
dwc_ddrphy_apb_wr(0x90052,0x9); // DWC_DDRPHYA_INITENG0_SequenceReg0b13s2
dwc_ddrphy_apb_wr(0x90053,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b14s0
dwc_ddrphy_apb_wr(0x90054,0x448); // DWC_DDRPHYA_INITENG0_SequenceReg0b14s1
dwc_ddrphy_apb_wr(0x90055,0x109); // DWC_DDRPHYA_INITENG0_SequenceReg0b14s2
dwc_ddrphy_apb_wr(0x90056,0x40); // DWC_DDRPHYA_INITENG0_SequenceReg0b15s0
dwc_ddrphy_apb_wr(0x90057,0x633); // DWC_DDRPHYA_INITENG0_SequenceReg0b15s1
dwc_ddrphy_apb_wr(0x90058,0x179); // DWC_DDRPHYA_INITENG0_SequenceReg0b15s2
dwc_ddrphy_apb_wr(0x90059,0x1); // DWC_DDRPHYA_INITENG0_SequenceReg0b16s0
dwc_ddrphy_apb_wr(0x9005a,0x618); // DWC_DDRPHYA_INITENG0_SequenceReg0b16s1
dwc_ddrphy_apb_wr(0x9005b,0x109); // DWC_DDRPHYA_INITENG0_SequenceReg0b16s2
dwc_ddrphy_apb_wr(0x9005c,0x40c0); // DWC_DDRPHYA_INITENG0_SequenceReg0b17s0
dwc_ddrphy_apb_wr(0x9005d,0x633); // DWC_DDRPHYA_INITENG0_SequenceReg0b17s1
dwc_ddrphy_apb_wr(0x9005e,0x149); // DWC_DDRPHYA_INITENG0_SequenceReg0b17s2
dwc_ddrphy_apb_wr(0x9005f,0x8); // DWC_DDRPHYA_INITENG0_SequenceReg0b18s0
dwc_ddrphy_apb_wr(0x90060,0x4); // DWC_DDRPHYA_INITENG0_SequenceReg0b18s1
dwc_ddrphy_apb_wr(0x90061,0x48); // DWC_DDRPHYA_INITENG0_SequenceReg0b18s2
dwc_ddrphy_apb_wr(0x90062,0x4040); // DWC_DDRPHYA_INITENG0_SequenceReg0b19s0
dwc_ddrphy_apb_wr(0x90063,0x633); // DWC_DDRPHYA_INITENG0_SequenceReg0b19s1
dwc_ddrphy_apb_wr(0x90064,0x149); // DWC_DDRPHYA_INITENG0_SequenceReg0b19s2
dwc_ddrphy_apb_wr(0x90065,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b20s0
dwc_ddrphy_apb_wr(0x90066,0x4); // DWC_DDRPHYA_INITENG0_SequenceReg0b20s1
dwc_ddrphy_apb_wr(0x90067,0x48); // DWC_DDRPHYA_INITENG0_SequenceReg0b20s2
dwc_ddrphy_apb_wr(0x90068,0x40); // DWC_DDRPHYA_INITENG0_SequenceReg0b21s0
dwc_ddrphy_apb_wr(0x90069,0x633); // DWC_DDRPHYA_INITENG0_SequenceReg0b21s1
dwc_ddrphy_apb_wr(0x9006a,0x149); // DWC_DDRPHYA_INITENG0_SequenceReg0b21s2
dwc_ddrphy_apb_wr(0x9006b,0x10); // DWC_DDRPHYA_INITENG0_SequenceReg0b22s0
dwc_ddrphy_apb_wr(0x9006c,0x4); // DWC_DDRPHYA_INITENG0_SequenceReg0b22s1
dwc_ddrphy_apb_wr(0x9006d,0x18); // DWC_DDRPHYA_INITENG0_SequenceReg0b22s2
dwc_ddrphy_apb_wr(0x9006e,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b23s0
dwc_ddrphy_apb_wr(0x9006f,0x4); // DWC_DDRPHYA_INITENG0_SequenceReg0b23s1
dwc_ddrphy_apb_wr(0x90070,0x78); // DWC_DDRPHYA_INITENG0_SequenceReg0b23s2
dwc_ddrphy_apb_wr(0x90071,0x549); // DWC_DDRPHYA_INITENG0_SequenceReg0b24s0
dwc_ddrphy_apb_wr(0x90072,0x633); // DWC_DDRPHYA_INITENG0_SequenceReg0b24s1
dwc_ddrphy_apb_wr(0x90073,0x159); // DWC_DDRPHYA_INITENG0_SequenceReg0b24s2
dwc_ddrphy_apb_wr(0x90074,0xd49); // DWC_DDRPHYA_INITENG0_SequenceReg0b25s0
dwc_ddrphy_apb_wr(0x90075,0x633); // DWC_DDRPHYA_INITENG0_SequenceReg0b25s1
dwc_ddrphy_apb_wr(0x90076,0x159); // DWC_DDRPHYA_INITENG0_SequenceReg0b25s2
dwc_ddrphy_apb_wr(0x90077,0x94a); // DWC_DDRPHYA_INITENG0_SequenceReg0b26s0
dwc_ddrphy_apb_wr(0x90078,0x633); // DWC_DDRPHYA_INITENG0_SequenceReg0b26s1
dwc_ddrphy_apb_wr(0x90079,0x159); // DWC_DDRPHYA_INITENG0_SequenceReg0b26s2
dwc_ddrphy_apb_wr(0x9007a,0x441); // DWC_DDRPHYA_INITENG0_SequenceReg0b27s0
dwc_ddrphy_apb_wr(0x9007b,0x633); // DWC_DDRPHYA_INITENG0_SequenceReg0b27s1
dwc_ddrphy_apb_wr(0x9007c,0x149); // DWC_DDRPHYA_INITENG0_SequenceReg0b27s2
dwc_ddrphy_apb_wr(0x9007d,0x42); // DWC_DDRPHYA_INITENG0_SequenceReg0b28s0
dwc_ddrphy_apb_wr(0x9007e,0x633); // DWC_DDRPHYA_INITENG0_SequenceReg0b28s1
dwc_ddrphy_apb_wr(0x9007f,0x149); // DWC_DDRPHYA_INITENG0_SequenceReg0b28s2
dwc_ddrphy_apb_wr(0x90080,0x1); // DWC_DDRPHYA_INITENG0_SequenceReg0b29s0
dwc_ddrphy_apb_wr(0x90081,0x633); // DWC_DDRPHYA_INITENG0_SequenceReg0b29s1
dwc_ddrphy_apb_wr(0x90082,0x149); // DWC_DDRPHYA_INITENG0_SequenceReg0b29s2
dwc_ddrphy_apb_wr(0x90083,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b30s0
dwc_ddrphy_apb_wr(0x90084,0xe0); // DWC_DDRPHYA_INITENG0_SequenceReg0b30s1
dwc_ddrphy_apb_wr(0x90085,0x109); // DWC_DDRPHYA_INITENG0_SequenceReg0b30s2
dwc_ddrphy_apb_wr(0x90086,0xa); // DWC_DDRPHYA_INITENG0_SequenceReg0b31s0
dwc_ddrphy_apb_wr(0x90087,0x10); // DWC_DDRPHYA_INITENG0_SequenceReg0b31s1
dwc_ddrphy_apb_wr(0x90088,0x109); // DWC_DDRPHYA_INITENG0_SequenceReg0b31s2
dwc_ddrphy_apb_wr(0x90089,0x9); // DWC_DDRPHYA_INITENG0_SequenceReg0b32s0
dwc_ddrphy_apb_wr(0x9008a,0x3c0); // DWC_DDRPHYA_INITENG0_SequenceReg0b32s1
dwc_ddrphy_apb_wr(0x9008b,0x149); // DWC_DDRPHYA_INITENG0_SequenceReg0b32s2
dwc_ddrphy_apb_wr(0x9008c,0x9); // DWC_DDRPHYA_INITENG0_SequenceReg0b33s0
dwc_ddrphy_apb_wr(0x9008d,0x3c0); // DWC_DDRPHYA_INITENG0_SequenceReg0b33s1
dwc_ddrphy_apb_wr(0x9008e,0x159); // DWC_DDRPHYA_INITENG0_SequenceReg0b33s2
dwc_ddrphy_apb_wr(0x9008f,0x18); // DWC_DDRPHYA_INITENG0_SequenceReg0b34s0
dwc_ddrphy_apb_wr(0x90090,0x10); // DWC_DDRPHYA_INITENG0_SequenceReg0b34s1
dwc_ddrphy_apb_wr(0x90091,0x109); // DWC_DDRPHYA_INITENG0_SequenceReg0b34s2
dwc_ddrphy_apb_wr(0x90092,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b35s0
dwc_ddrphy_apb_wr(0x90093,0x3c0); // DWC_DDRPHYA_INITENG0_SequenceReg0b35s1
dwc_ddrphy_apb_wr(0x90094,0x109); // DWC_DDRPHYA_INITENG0_SequenceReg0b35s2
dwc_ddrphy_apb_wr(0x90095,0x18); // DWC_DDRPHYA_INITENG0_SequenceReg0b36s0
dwc_ddrphy_apb_wr(0x90096,0x4); // DWC_DDRPHYA_INITENG0_SequenceReg0b36s1
dwc_ddrphy_apb_wr(0x90097,0x48); // DWC_DDRPHYA_INITENG0_SequenceReg0b36s2
dwc_ddrphy_apb_wr(0x90098,0x18); // DWC_DDRPHYA_INITENG0_SequenceReg0b37s0
dwc_ddrphy_apb_wr(0x90099,0x4); // DWC_DDRPHYA_INITENG0_SequenceReg0b37s1
dwc_ddrphy_apb_wr(0x9009a,0x58); // DWC_DDRPHYA_INITENG0_SequenceReg0b37s2
dwc_ddrphy_apb_wr(0x9009b,0xb); // DWC_DDRPHYA_INITENG0_SequenceReg0b38s0
dwc_ddrphy_apb_wr(0x9009c,0x10); // DWC_DDRPHYA_INITENG0_SequenceReg0b38s1
dwc_ddrphy_apb_wr(0x9009d,0x109); // DWC_DDRPHYA_INITENG0_SequenceReg0b38s2
dwc_ddrphy_apb_wr(0x9009e,0x1); // DWC_DDRPHYA_INITENG0_SequenceReg0b39s0
dwc_ddrphy_apb_wr(0x9009f,0x10); // DWC_DDRPHYA_INITENG0_SequenceReg0b39s1
dwc_ddrphy_apb_wr(0x900a0,0x109); // DWC_DDRPHYA_INITENG0_SequenceReg0b39s2
dwc_ddrphy_apb_wr(0x900a1,0x5); // DWC_DDRPHYA_INITENG0_SequenceReg0b40s0
dwc_ddrphy_apb_wr(0x900a2,0x7c0); // DWC_DDRPHYA_INITENG0_SequenceReg0b40s1
dwc_ddrphy_apb_wr(0x900a3,0x109); // DWC_DDRPHYA_INITENG0_SequenceReg0b40s2
dwc_ddrphy_apb_wr(0x40000,0x811); // DWC_DDRPHYA_ACSM0_AcsmSeq0x0
dwc_ddrphy_apb_wr(0x40020,0x880); // DWC_DDRPHYA_ACSM0_AcsmSeq1x0
dwc_ddrphy_apb_wr(0x40040,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq2x0
dwc_ddrphy_apb_wr(0x40060,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq3x0
dwc_ddrphy_apb_wr(0x40001,0x4008); // DWC_DDRPHYA_ACSM0_AcsmSeq0x1
dwc_ddrphy_apb_wr(0x40021,0x83); // DWC_DDRPHYA_ACSM0_AcsmSeq1x1
dwc_ddrphy_apb_wr(0x40041,0x4f); // DWC_DDRPHYA_ACSM0_AcsmSeq2x1
dwc_ddrphy_apb_wr(0x40061,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq3x1
dwc_ddrphy_apb_wr(0x40002,0x4040); // DWC_DDRPHYA_ACSM0_AcsmSeq0x2
dwc_ddrphy_apb_wr(0x40022,0x83); // DWC_DDRPHYA_ACSM0_AcsmSeq1x2
dwc_ddrphy_apb_wr(0x40042,0x51); // DWC_DDRPHYA_ACSM0_AcsmSeq2x2
dwc_ddrphy_apb_wr(0x40062,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq3x2
dwc_ddrphy_apb_wr(0x40003,0x811); // DWC_DDRPHYA_ACSM0_AcsmSeq0x3
dwc_ddrphy_apb_wr(0x40023,0x880); // DWC_DDRPHYA_ACSM0_AcsmSeq1x3
dwc_ddrphy_apb_wr(0x40043,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq2x3
dwc_ddrphy_apb_wr(0x40063,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq3x3
dwc_ddrphy_apb_wr(0x40004,0x720); // DWC_DDRPHYA_ACSM0_AcsmSeq0x4
dwc_ddrphy_apb_wr(0x40024,0xf); // DWC_DDRPHYA_ACSM0_AcsmSeq1x4
dwc_ddrphy_apb_wr(0x40044,0x1740); // DWC_DDRPHYA_ACSM0_AcsmSeq2x4
dwc_ddrphy_apb_wr(0x40064,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq3x4
dwc_ddrphy_apb_wr(0x40005,0x16); // DWC_DDRPHYA_ACSM0_AcsmSeq0x5
dwc_ddrphy_apb_wr(0x40025,0x83); // DWC_DDRPHYA_ACSM0_AcsmSeq1x5
dwc_ddrphy_apb_wr(0x40045,0x4b); // DWC_DDRPHYA_ACSM0_AcsmSeq2x5
dwc_ddrphy_apb_wr(0x40065,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq3x5
dwc_ddrphy_apb_wr(0x40006,0x716); // DWC_DDRPHYA_ACSM0_AcsmSeq0x6
dwc_ddrphy_apb_wr(0x40026,0xf); // DWC_DDRPHYA_ACSM0_AcsmSeq1x6
dwc_ddrphy_apb_wr(0x40046,0x2001); // DWC_DDRPHYA_ACSM0_AcsmSeq2x6
dwc_ddrphy_apb_wr(0x40066,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq3x6
dwc_ddrphy_apb_wr(0x40007,0x716); // DWC_DDRPHYA_ACSM0_AcsmSeq0x7
dwc_ddrphy_apb_wr(0x40027,0xf); // DWC_DDRPHYA_ACSM0_AcsmSeq1x7
dwc_ddrphy_apb_wr(0x40047,0x2800); // DWC_DDRPHYA_ACSM0_AcsmSeq2x7
dwc_ddrphy_apb_wr(0x40067,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq3x7
dwc_ddrphy_apb_wr(0x40008,0x716); // DWC_DDRPHYA_ACSM0_AcsmSeq0x8
dwc_ddrphy_apb_wr(0x40028,0xf); // DWC_DDRPHYA_ACSM0_AcsmSeq1x8
dwc_ddrphy_apb_wr(0x40048,0xf00); // DWC_DDRPHYA_ACSM0_AcsmSeq2x8
dwc_ddrphy_apb_wr(0x40068,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq3x8
dwc_ddrphy_apb_wr(0x40009,0x720); // DWC_DDRPHYA_ACSM0_AcsmSeq0x9
dwc_ddrphy_apb_wr(0x40029,0xf); // DWC_DDRPHYA_ACSM0_AcsmSeq1x9
dwc_ddrphy_apb_wr(0x40049,0x1400); // DWC_DDRPHYA_ACSM0_AcsmSeq2x9
dwc_ddrphy_apb_wr(0x40069,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq3x9
dwc_ddrphy_apb_wr(0x4000a,0xe08); // DWC_DDRPHYA_ACSM0_AcsmSeq0x10
dwc_ddrphy_apb_wr(0x4002a,0xc15); // DWC_DDRPHYA_ACSM0_AcsmSeq1x10
dwc_ddrphy_apb_wr(0x4004a,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq2x10
dwc_ddrphy_apb_wr(0x4006a,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq3x10
dwc_ddrphy_apb_wr(0x4000b,0x625); // DWC_DDRPHYA_ACSM0_AcsmSeq0x11
dwc_ddrphy_apb_wr(0x4002b,0x15); // DWC_DDRPHYA_ACSM0_AcsmSeq1x11
dwc_ddrphy_apb_wr(0x4004b,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq2x11
dwc_ddrphy_apb_wr(0x4006b,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq3x11
dwc_ddrphy_apb_wr(0x4000c,0x4028); // DWC_DDRPHYA_ACSM0_AcsmSeq0x12
dwc_ddrphy_apb_wr(0x4002c,0x80); // DWC_DDRPHYA_ACSM0_AcsmSeq1x12
dwc_ddrphy_apb_wr(0x4004c,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq2x12
dwc_ddrphy_apb_wr(0x4006c,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq3x12
dwc_ddrphy_apb_wr(0x4000d,0xe08); // DWC_DDRPHYA_ACSM0_AcsmSeq0x13
dwc_ddrphy_apb_wr(0x4002d,0xc1a); // DWC_DDRPHYA_ACSM0_AcsmSeq1x13
dwc_ddrphy_apb_wr(0x4004d,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq2x13
dwc_ddrphy_apb_wr(0x4006d,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq3x13
dwc_ddrphy_apb_wr(0x4000e,0x625); // DWC_DDRPHYA_ACSM0_AcsmSeq0x14
dwc_ddrphy_apb_wr(0x4002e,0x1a); // DWC_DDRPHYA_ACSM0_AcsmSeq1x14
dwc_ddrphy_apb_wr(0x4004e,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq2x14
dwc_ddrphy_apb_wr(0x4006e,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq3x14
dwc_ddrphy_apb_wr(0x4000f,0x4040); // DWC_DDRPHYA_ACSM0_AcsmSeq0x15
dwc_ddrphy_apb_wr(0x4002f,0x80); // DWC_DDRPHYA_ACSM0_AcsmSeq1x15
dwc_ddrphy_apb_wr(0x4004f,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq2x15
dwc_ddrphy_apb_wr(0x4006f,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq3x15
dwc_ddrphy_apb_wr(0x40010,0x2604); // DWC_DDRPHYA_ACSM0_AcsmSeq0x16
dwc_ddrphy_apb_wr(0x40030,0x15); // DWC_DDRPHYA_ACSM0_AcsmSeq1x16
dwc_ddrphy_apb_wr(0x40050,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq2x16
dwc_ddrphy_apb_wr(0x40070,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq3x16
dwc_ddrphy_apb_wr(0x40011,0x708); // DWC_DDRPHYA_ACSM0_AcsmSeq0x17
dwc_ddrphy_apb_wr(0x40031,0x5); // DWC_DDRPHYA_ACSM0_AcsmSeq1x17
dwc_ddrphy_apb_wr(0x40051,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq2x17
dwc_ddrphy_apb_wr(0x40071,0x2002); // DWC_DDRPHYA_ACSM0_AcsmSeq3x17
dwc_ddrphy_apb_wr(0x40012,0x8); // DWC_DDRPHYA_ACSM0_AcsmSeq0x18
dwc_ddrphy_apb_wr(0x40032,0x80); // DWC_DDRPHYA_ACSM0_AcsmSeq1x18
dwc_ddrphy_apb_wr(0x40052,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq2x18
dwc_ddrphy_apb_wr(0x40072,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq3x18
dwc_ddrphy_apb_wr(0x40013,0x2604); // DWC_DDRPHYA_ACSM0_AcsmSeq0x19
dwc_ddrphy_apb_wr(0x40033,0x1a); // DWC_DDRPHYA_ACSM0_AcsmSeq1x19
dwc_ddrphy_apb_wr(0x40053,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq2x19
dwc_ddrphy_apb_wr(0x40073,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq3x19
dwc_ddrphy_apb_wr(0x40014,0x708); // DWC_DDRPHYA_ACSM0_AcsmSeq0x20
dwc_ddrphy_apb_wr(0x40034,0xa); // DWC_DDRPHYA_ACSM0_AcsmSeq1x20
dwc_ddrphy_apb_wr(0x40054,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq2x20
dwc_ddrphy_apb_wr(0x40074,0x2002); // DWC_DDRPHYA_ACSM0_AcsmSeq3x20
dwc_ddrphy_apb_wr(0x40015,0x4040); // DWC_DDRPHYA_ACSM0_AcsmSeq0x21
dwc_ddrphy_apb_wr(0x40035,0x80); // DWC_DDRPHYA_ACSM0_AcsmSeq1x21
dwc_ddrphy_apb_wr(0x40055,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq2x21
dwc_ddrphy_apb_wr(0x40075,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq3x21
dwc_ddrphy_apb_wr(0x40016,0x60a); // DWC_DDRPHYA_ACSM0_AcsmSeq0x22
dwc_ddrphy_apb_wr(0x40036,0x15); // DWC_DDRPHYA_ACSM0_AcsmSeq1x22
dwc_ddrphy_apb_wr(0x40056,0x1200); // DWC_DDRPHYA_ACSM0_AcsmSeq2x22
dwc_ddrphy_apb_wr(0x40076,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq3x22
dwc_ddrphy_apb_wr(0x40017,0x61a); // DWC_DDRPHYA_ACSM0_AcsmSeq0x23
dwc_ddrphy_apb_wr(0x40037,0x15); // DWC_DDRPHYA_ACSM0_AcsmSeq1x23
dwc_ddrphy_apb_wr(0x40057,0x1300); // DWC_DDRPHYA_ACSM0_AcsmSeq2x23
dwc_ddrphy_apb_wr(0x40077,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq3x23
dwc_ddrphy_apb_wr(0x40018,0x60a); // DWC_DDRPHYA_ACSM0_AcsmSeq0x24
dwc_ddrphy_apb_wr(0x40038,0x1a); // DWC_DDRPHYA_ACSM0_AcsmSeq1x24
dwc_ddrphy_apb_wr(0x40058,0x1200); // DWC_DDRPHYA_ACSM0_AcsmSeq2x24
dwc_ddrphy_apb_wr(0x40078,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq3x24
dwc_ddrphy_apb_wr(0x40019,0x642); // DWC_DDRPHYA_ACSM0_AcsmSeq0x25
dwc_ddrphy_apb_wr(0x40039,0x1a); // DWC_DDRPHYA_ACSM0_AcsmSeq1x25
dwc_ddrphy_apb_wr(0x40059,0x1300); // DWC_DDRPHYA_ACSM0_AcsmSeq2x25
dwc_ddrphy_apb_wr(0x40079,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq3x25
dwc_ddrphy_apb_wr(0x4001a,0x4808); // DWC_DDRPHYA_ACSM0_AcsmSeq0x26
dwc_ddrphy_apb_wr(0x4003a,0x880); // DWC_DDRPHYA_ACSM0_AcsmSeq1x26
dwc_ddrphy_apb_wr(0x4005a,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq2x26
dwc_ddrphy_apb_wr(0x4007a,0x0); // DWC_DDRPHYA_ACSM0_AcsmSeq3x26
dwc_ddrphy_apb_wr(0x900a4,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b41s0
dwc_ddrphy_apb_wr(0x900a5,0x790); // DWC_DDRPHYA_INITENG0_SequenceReg0b41s1
dwc_ddrphy_apb_wr(0x900a6,0x11a); // DWC_DDRPHYA_INITENG0_SequenceReg0b41s2
dwc_ddrphy_apb_wr(0x900a7,0x8); // DWC_DDRPHYA_INITENG0_SequenceReg0b42s0
dwc_ddrphy_apb_wr(0x900a8,0x7aa); // DWC_DDRPHYA_INITENG0_SequenceReg0b42s1
dwc_ddrphy_apb_wr(0x900a9,0x2a); // DWC_DDRPHYA_INITENG0_SequenceReg0b42s2
dwc_ddrphy_apb_wr(0x900aa,0x10); // DWC_DDRPHYA_INITENG0_SequenceReg0b43s0
dwc_ddrphy_apb_wr(0x900ab,0x7b2); // DWC_DDRPHYA_INITENG0_SequenceReg0b43s1
dwc_ddrphy_apb_wr(0x900ac,0x2a); // DWC_DDRPHYA_INITENG0_SequenceReg0b43s2
dwc_ddrphy_apb_wr(0x900ad,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b44s0
dwc_ddrphy_apb_wr(0x900ae,0x7c8); // DWC_DDRPHYA_INITENG0_SequenceReg0b44s1
dwc_ddrphy_apb_wr(0x900af,0x109); // DWC_DDRPHYA_INITENG0_SequenceReg0b44s2
dwc_ddrphy_apb_wr(0x900b0,0x10); // DWC_DDRPHYA_INITENG0_SequenceReg0b45s0
dwc_ddrphy_apb_wr(0x900b1,0x10); // DWC_DDRPHYA_INITENG0_SequenceReg0b45s1
dwc_ddrphy_apb_wr(0x900b2,0x109); // DWC_DDRPHYA_INITENG0_SequenceReg0b45s2
dwc_ddrphy_apb_wr(0x900b3,0x10); // DWC_DDRPHYA_INITENG0_SequenceReg0b46s0
dwc_ddrphy_apb_wr(0x900b4,0x2a8); // DWC_DDRPHYA_INITENG0_SequenceReg0b46s1
dwc_ddrphy_apb_wr(0x900b5,0x129); // DWC_DDRPHYA_INITENG0_SequenceReg0b46s2
dwc_ddrphy_apb_wr(0x900b6,0x8); // DWC_DDRPHYA_INITENG0_SequenceReg0b47s0
dwc_ddrphy_apb_wr(0x900b7,0x370); // DWC_DDRPHYA_INITENG0_SequenceReg0b47s1
dwc_ddrphy_apb_wr(0x900b8,0x129); // DWC_DDRPHYA_INITENG0_SequenceReg0b47s2
dwc_ddrphy_apb_wr(0x900b9,0xa); // DWC_DDRPHYA_INITENG0_SequenceReg0b48s0
dwc_ddrphy_apb_wr(0x900ba,0x3c8); // DWC_DDRPHYA_INITENG0_SequenceReg0b48s1
dwc_ddrphy_apb_wr(0x900bb,0x1a9); // DWC_DDRPHYA_INITENG0_SequenceReg0b48s2
dwc_ddrphy_apb_wr(0x900bc,0xc); // DWC_DDRPHYA_INITENG0_SequenceReg0b49s0
dwc_ddrphy_apb_wr(0x900bd,0x408); // DWC_DDRPHYA_INITENG0_SequenceReg0b49s1
dwc_ddrphy_apb_wr(0x900be,0x199); // DWC_DDRPHYA_INITENG0_SequenceReg0b49s2
dwc_ddrphy_apb_wr(0x900bf,0x14); // DWC_DDRPHYA_INITENG0_SequenceReg0b50s0
dwc_ddrphy_apb_wr(0x900c0,0x790); // DWC_DDRPHYA_INITENG0_SequenceReg0b50s1
dwc_ddrphy_apb_wr(0x900c1,0x11a); // DWC_DDRPHYA_INITENG0_SequenceReg0b50s2
dwc_ddrphy_apb_wr(0x900c2,0x8); // DWC_DDRPHYA_INITENG0_SequenceReg0b51s0
dwc_ddrphy_apb_wr(0x900c3,0x4); // DWC_DDRPHYA_INITENG0_SequenceReg0b51s1
dwc_ddrphy_apb_wr(0x900c4,0x18); // DWC_DDRPHYA_INITENG0_SequenceReg0b51s2
dwc_ddrphy_apb_wr(0x900c5,0xe); // DWC_DDRPHYA_INITENG0_SequenceReg0b52s0
dwc_ddrphy_apb_wr(0x900c6,0x408); // DWC_DDRPHYA_INITENG0_SequenceReg0b52s1
dwc_ddrphy_apb_wr(0x900c7,0x199); // DWC_DDRPHYA_INITENG0_SequenceReg0b52s2
dwc_ddrphy_apb_wr(0x900c8,0x8); // DWC_DDRPHYA_INITENG0_SequenceReg0b53s0
dwc_ddrphy_apb_wr(0x900c9,0x8568); // DWC_DDRPHYA_INITENG0_SequenceReg0b53s1
dwc_ddrphy_apb_wr(0x900ca,0x108); // DWC_DDRPHYA_INITENG0_SequenceReg0b53s2
dwc_ddrphy_apb_wr(0x900cb,0x18); // DWC_DDRPHYA_INITENG0_SequenceReg0b54s0
dwc_ddrphy_apb_wr(0x900cc,0x790); // DWC_DDRPHYA_INITENG0_SequenceReg0b54s1
dwc_ddrphy_apb_wr(0x900cd,0x16a); // DWC_DDRPHYA_INITENG0_SequenceReg0b54s2
dwc_ddrphy_apb_wr(0x900ce,0x8); // DWC_DDRPHYA_INITENG0_SequenceReg0b55s0
dwc_ddrphy_apb_wr(0x900cf,0x1d8); // DWC_DDRPHYA_INITENG0_SequenceReg0b55s1
dwc_ddrphy_apb_wr(0x900d0,0x169); // DWC_DDRPHYA_INITENG0_SequenceReg0b55s2
dwc_ddrphy_apb_wr(0x900d1,0x10); // DWC_DDRPHYA_INITENG0_SequenceReg0b56s0
dwc_ddrphy_apb_wr(0x900d2,0x8558); // DWC_DDRPHYA_INITENG0_SequenceReg0b56s1
dwc_ddrphy_apb_wr(0x900d3,0x168); // DWC_DDRPHYA_INITENG0_SequenceReg0b56s2
dwc_ddrphy_apb_wr(0x900d4,0x70); // DWC_DDRPHYA_INITENG0_SequenceReg0b57s0
dwc_ddrphy_apb_wr(0x900d5,0x788); // DWC_DDRPHYA_INITENG0_SequenceReg0b57s1
dwc_ddrphy_apb_wr(0x900d6,0x16a); // DWC_DDRPHYA_INITENG0_SequenceReg0b57s2
dwc_ddrphy_apb_wr(0x900d7,0x1ff8); // DWC_DDRPHYA_INITENG0_SequenceReg0b58s0
dwc_ddrphy_apb_wr(0x900d8,0x85a8); // DWC_DDRPHYA_INITENG0_SequenceReg0b58s1
dwc_ddrphy_apb_wr(0x900d9,0x1e8); // DWC_DDRPHYA_INITENG0_SequenceReg0b58s2
dwc_ddrphy_apb_wr(0x900da,0x50); // DWC_DDRPHYA_INITENG0_SequenceReg0b59s0
dwc_ddrphy_apb_wr(0x900db,0x798); // DWC_DDRPHYA_INITENG0_SequenceReg0b59s1
dwc_ddrphy_apb_wr(0x900dc,0x16a); // DWC_DDRPHYA_INITENG0_SequenceReg0b59s2
dwc_ddrphy_apb_wr(0x900dd,0x60); // DWC_DDRPHYA_INITENG0_SequenceReg0b60s0
dwc_ddrphy_apb_wr(0x900de,0x7a0); // DWC_DDRPHYA_INITENG0_SequenceReg0b60s1
dwc_ddrphy_apb_wr(0x900df,0x16a); // DWC_DDRPHYA_INITENG0_SequenceReg0b60s2
dwc_ddrphy_apb_wr(0x900e0,0x8); // DWC_DDRPHYA_INITENG0_SequenceReg0b61s0
dwc_ddrphy_apb_wr(0x900e1,0x8310); // DWC_DDRPHYA_INITENG0_SequenceReg0b61s1
dwc_ddrphy_apb_wr(0x900e2,0x168); // DWC_DDRPHYA_INITENG0_SequenceReg0b61s2
dwc_ddrphy_apb_wr(0x900e3,0x8); // DWC_DDRPHYA_INITENG0_SequenceReg0b62s0
dwc_ddrphy_apb_wr(0x900e4,0xa310); // DWC_DDRPHYA_INITENG0_SequenceReg0b62s1
dwc_ddrphy_apb_wr(0x900e5,0x168); // DWC_DDRPHYA_INITENG0_SequenceReg0b62s2
dwc_ddrphy_apb_wr(0x900e6,0xa); // DWC_DDRPHYA_INITENG0_SequenceReg0b63s0
dwc_ddrphy_apb_wr(0x900e7,0x408); // DWC_DDRPHYA_INITENG0_SequenceReg0b63s1
dwc_ddrphy_apb_wr(0x900e8,0x169); // DWC_DDRPHYA_INITENG0_SequenceReg0b63s2
dwc_ddrphy_apb_wr(0x900e9,0x6e); // DWC_DDRPHYA_INITENG0_SequenceReg0b64s0
dwc_ddrphy_apb_wr(0x900ea,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b64s1
dwc_ddrphy_apb_wr(0x900eb,0x68); // DWC_DDRPHYA_INITENG0_SequenceReg0b64s2
dwc_ddrphy_apb_wr(0x900ec,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b65s0
dwc_ddrphy_apb_wr(0x900ed,0x408); // DWC_DDRPHYA_INITENG0_SequenceReg0b65s1
dwc_ddrphy_apb_wr(0x900ee,0x169); // DWC_DDRPHYA_INITENG0_SequenceReg0b65s2
dwc_ddrphy_apb_wr(0x900ef,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b66s0
dwc_ddrphy_apb_wr(0x900f0,0x8310); // DWC_DDRPHYA_INITENG0_SequenceReg0b66s1
dwc_ddrphy_apb_wr(0x900f1,0x168); // DWC_DDRPHYA_INITENG0_SequenceReg0b66s2
dwc_ddrphy_apb_wr(0x900f2,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b67s0
dwc_ddrphy_apb_wr(0x900f3,0xa310); // DWC_DDRPHYA_INITENG0_SequenceReg0b67s1
dwc_ddrphy_apb_wr(0x900f4,0x168); // DWC_DDRPHYA_INITENG0_SequenceReg0b67s2
dwc_ddrphy_apb_wr(0x900f5,0x1ff8); // DWC_DDRPHYA_INITENG0_SequenceReg0b68s0
dwc_ddrphy_apb_wr(0x900f6,0x85a8); // DWC_DDRPHYA_INITENG0_SequenceReg0b68s1
dwc_ddrphy_apb_wr(0x900f7,0x1e8); // DWC_DDRPHYA_INITENG0_SequenceReg0b68s2
dwc_ddrphy_apb_wr(0x900f8,0x68); // DWC_DDRPHYA_INITENG0_SequenceReg0b69s0
dwc_ddrphy_apb_wr(0x900f9,0x798); // DWC_DDRPHYA_INITENG0_SequenceReg0b69s1
dwc_ddrphy_apb_wr(0x900fa,0x16a); // DWC_DDRPHYA_INITENG0_SequenceReg0b69s2
dwc_ddrphy_apb_wr(0x900fb,0x78); // DWC_DDRPHYA_INITENG0_SequenceReg0b70s0
dwc_ddrphy_apb_wr(0x900fc,0x7a0); // DWC_DDRPHYA_INITENG0_SequenceReg0b70s1
dwc_ddrphy_apb_wr(0x900fd,0x16a); // DWC_DDRPHYA_INITENG0_SequenceReg0b70s2
dwc_ddrphy_apb_wr(0x900fe,0x68); // DWC_DDRPHYA_INITENG0_SequenceReg0b71s0
dwc_ddrphy_apb_wr(0x900ff,0x790); // DWC_DDRPHYA_INITENG0_SequenceReg0b71s1
dwc_ddrphy_apb_wr(0x90100,0x16a); // DWC_DDRPHYA_INITENG0_SequenceReg0b71s2
dwc_ddrphy_apb_wr(0x90101,0x8); // DWC_DDRPHYA_INITENG0_SequenceReg0b72s0
dwc_ddrphy_apb_wr(0x90102,0x8b10); // DWC_DDRPHYA_INITENG0_SequenceReg0b72s1
dwc_ddrphy_apb_wr(0x90103,0x168); // DWC_DDRPHYA_INITENG0_SequenceReg0b72s2
dwc_ddrphy_apb_wr(0x90104,0x8); // DWC_DDRPHYA_INITENG0_SequenceReg0b73s0
dwc_ddrphy_apb_wr(0x90105,0xab10); // DWC_DDRPHYA_INITENG0_SequenceReg0b73s1
dwc_ddrphy_apb_wr(0x90106,0x168); // DWC_DDRPHYA_INITENG0_SequenceReg0b73s2
dwc_ddrphy_apb_wr(0x90107,0xa); // DWC_DDRPHYA_INITENG0_SequenceReg0b74s0
dwc_ddrphy_apb_wr(0x90108,0x408); // DWC_DDRPHYA_INITENG0_SequenceReg0b74s1
dwc_ddrphy_apb_wr(0x90109,0x169); // DWC_DDRPHYA_INITENG0_SequenceReg0b74s2
dwc_ddrphy_apb_wr(0x9010a,0x58); // DWC_DDRPHYA_INITENG0_SequenceReg0b75s0
dwc_ddrphy_apb_wr(0x9010b,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b75s1
dwc_ddrphy_apb_wr(0x9010c,0x68); // DWC_DDRPHYA_INITENG0_SequenceReg0b75s2
dwc_ddrphy_apb_wr(0x9010d,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b76s0
dwc_ddrphy_apb_wr(0x9010e,0x408); // DWC_DDRPHYA_INITENG0_SequenceReg0b76s1
dwc_ddrphy_apb_wr(0x9010f,0x169); // DWC_DDRPHYA_INITENG0_SequenceReg0b76s2
dwc_ddrphy_apb_wr(0x90110,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b77s0
dwc_ddrphy_apb_wr(0x90111,0x8b10); // DWC_DDRPHYA_INITENG0_SequenceReg0b77s1
dwc_ddrphy_apb_wr(0x90112,0x168); // DWC_DDRPHYA_INITENG0_SequenceReg0b77s2
dwc_ddrphy_apb_wr(0x90113,0x1); // DWC_DDRPHYA_INITENG0_SequenceReg0b78s0
dwc_ddrphy_apb_wr(0x90114,0xab10); // DWC_DDRPHYA_INITENG0_SequenceReg0b78s1
dwc_ddrphy_apb_wr(0x90115,0x168); // DWC_DDRPHYA_INITENG0_SequenceReg0b78s2
dwc_ddrphy_apb_wr(0x90116,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b79s0
dwc_ddrphy_apb_wr(0x90117,0x1d8); // DWC_DDRPHYA_INITENG0_SequenceReg0b79s1
dwc_ddrphy_apb_wr(0x90118,0x169); // DWC_DDRPHYA_INITENG0_SequenceReg0b79s2
dwc_ddrphy_apb_wr(0x90119,0x80); // DWC_DDRPHYA_INITENG0_SequenceReg0b80s0
dwc_ddrphy_apb_wr(0x9011a,0x790); // DWC_DDRPHYA_INITENG0_SequenceReg0b80s1
dwc_ddrphy_apb_wr(0x9011b,0x16a); // DWC_DDRPHYA_INITENG0_SequenceReg0b80s2
dwc_ddrphy_apb_wr(0x9011c,0x18); // DWC_DDRPHYA_INITENG0_SequenceReg0b81s0
dwc_ddrphy_apb_wr(0x9011d,0x7aa); // DWC_DDRPHYA_INITENG0_SequenceReg0b81s1
dwc_ddrphy_apb_wr(0x9011e,0x6a); // DWC_DDRPHYA_INITENG0_SequenceReg0b81s2
dwc_ddrphy_apb_wr(0x9011f,0xa); // DWC_DDRPHYA_INITENG0_SequenceReg0b82s0
dwc_ddrphy_apb_wr(0x90120,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b82s1
dwc_ddrphy_apb_wr(0x90121,0x1e9); // DWC_DDRPHYA_INITENG0_SequenceReg0b82s2
dwc_ddrphy_apb_wr(0x90122,0x8); // DWC_DDRPHYA_INITENG0_SequenceReg0b83s0
dwc_ddrphy_apb_wr(0x90123,0x8080); // DWC_DDRPHYA_INITENG0_SequenceReg0b83s1
dwc_ddrphy_apb_wr(0x90124,0x108); // DWC_DDRPHYA_INITENG0_SequenceReg0b83s2
dwc_ddrphy_apb_wr(0x90125,0xf); // DWC_DDRPHYA_INITENG0_SequenceReg0b84s0
dwc_ddrphy_apb_wr(0x90126,0x408); // DWC_DDRPHYA_INITENG0_SequenceReg0b84s1
dwc_ddrphy_apb_wr(0x90127,0x169); // DWC_DDRPHYA_INITENG0_SequenceReg0b84s2
dwc_ddrphy_apb_wr(0x90128,0xc); // DWC_DDRPHYA_INITENG0_SequenceReg0b85s0
dwc_ddrphy_apb_wr(0x90129,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b85s1
dwc_ddrphy_apb_wr(0x9012a,0x68); // DWC_DDRPHYA_INITENG0_SequenceReg0b85s2
dwc_ddrphy_apb_wr(0x9012b,0x9); // DWC_DDRPHYA_INITENG0_SequenceReg0b86s0
dwc_ddrphy_apb_wr(0x9012c,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b86s1
dwc_ddrphy_apb_wr(0x9012d,0x1a9); // DWC_DDRPHYA_INITENG0_SequenceReg0b86s2
dwc_ddrphy_apb_wr(0x9012e,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b87s0
dwc_ddrphy_apb_wr(0x9012f,0x408); // DWC_DDRPHYA_INITENG0_SequenceReg0b87s1
dwc_ddrphy_apb_wr(0x90130,0x169); // DWC_DDRPHYA_INITENG0_SequenceReg0b87s2
dwc_ddrphy_apb_wr(0x90131,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b88s0
dwc_ddrphy_apb_wr(0x90132,0x8080); // DWC_DDRPHYA_INITENG0_SequenceReg0b88s1
dwc_ddrphy_apb_wr(0x90133,0x108); // DWC_DDRPHYA_INITENG0_SequenceReg0b88s2
dwc_ddrphy_apb_wr(0x90134,0x8); // DWC_DDRPHYA_INITENG0_SequenceReg0b89s0
dwc_ddrphy_apb_wr(0x90135,0x7aa); // DWC_DDRPHYA_INITENG0_SequenceReg0b89s1
dwc_ddrphy_apb_wr(0x90136,0x6a); // DWC_DDRPHYA_INITENG0_SequenceReg0b89s2
dwc_ddrphy_apb_wr(0x90137,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b90s0
dwc_ddrphy_apb_wr(0x90138,0x8568); // DWC_DDRPHYA_INITENG0_SequenceReg0b90s1
dwc_ddrphy_apb_wr(0x90139,0x108); // DWC_DDRPHYA_INITENG0_SequenceReg0b90s2
dwc_ddrphy_apb_wr(0x9013a,0xb7); // DWC_DDRPHYA_INITENG0_SequenceReg0b91s0
dwc_ddrphy_apb_wr(0x9013b,0x790); // DWC_DDRPHYA_INITENG0_SequenceReg0b91s1
dwc_ddrphy_apb_wr(0x9013c,0x16a); // DWC_DDRPHYA_INITENG0_SequenceReg0b91s2
dwc_ddrphy_apb_wr(0x9013d,0x1f); // DWC_DDRPHYA_INITENG0_SequenceReg0b92s0
dwc_ddrphy_apb_wr(0x9013e,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b92s1
dwc_ddrphy_apb_wr(0x9013f,0x68); // DWC_DDRPHYA_INITENG0_SequenceReg0b92s2
dwc_ddrphy_apb_wr(0x90140,0x8); // DWC_DDRPHYA_INITENG0_SequenceReg0b93s0
dwc_ddrphy_apb_wr(0x90141,0x8558); // DWC_DDRPHYA_INITENG0_SequenceReg0b93s1
dwc_ddrphy_apb_wr(0x90142,0x168); // DWC_DDRPHYA_INITENG0_SequenceReg0b93s2
dwc_ddrphy_apb_wr(0x90143,0xf); // DWC_DDRPHYA_INITENG0_SequenceReg0b94s0
dwc_ddrphy_apb_wr(0x90144,0x408); // DWC_DDRPHYA_INITENG0_SequenceReg0b94s1
dwc_ddrphy_apb_wr(0x90145,0x169); // DWC_DDRPHYA_INITENG0_SequenceReg0b94s2
dwc_ddrphy_apb_wr(0x90146,0xd); // DWC_DDRPHYA_INITENG0_SequenceReg0b95s0
dwc_ddrphy_apb_wr(0x90147,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b95s1
dwc_ddrphy_apb_wr(0x90148,0x68); // DWC_DDRPHYA_INITENG0_SequenceReg0b95s2
dwc_ddrphy_apb_wr(0x90149,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b96s0
dwc_ddrphy_apb_wr(0x9014a,0x408); // DWC_DDRPHYA_INITENG0_SequenceReg0b96s1
dwc_ddrphy_apb_wr(0x9014b,0x169); // DWC_DDRPHYA_INITENG0_SequenceReg0b96s2
dwc_ddrphy_apb_wr(0x9014c,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b97s0
dwc_ddrphy_apb_wr(0x9014d,0x8558); // DWC_DDRPHYA_INITENG0_SequenceReg0b97s1
dwc_ddrphy_apb_wr(0x9014e,0x168); // DWC_DDRPHYA_INITENG0_SequenceReg0b97s2
dwc_ddrphy_apb_wr(0x9014f,0x8); // DWC_DDRPHYA_INITENG0_SequenceReg0b98s0
dwc_ddrphy_apb_wr(0x90150,0x3c8); // DWC_DDRPHYA_INITENG0_SequenceReg0b98s1
dwc_ddrphy_apb_wr(0x90151,0x1a9); // DWC_DDRPHYA_INITENG0_SequenceReg0b98s2
dwc_ddrphy_apb_wr(0x90152,0x3); // DWC_DDRPHYA_INITENG0_SequenceReg0b99s0
dwc_ddrphy_apb_wr(0x90153,0x370); // DWC_DDRPHYA_INITENG0_SequenceReg0b99s1
dwc_ddrphy_apb_wr(0x90154,0x129); // DWC_DDRPHYA_INITENG0_SequenceReg0b99s2
dwc_ddrphy_apb_wr(0x90155,0x20); // DWC_DDRPHYA_INITENG0_SequenceReg0b100s0
dwc_ddrphy_apb_wr(0x90156,0x2aa); // DWC_DDRPHYA_INITENG0_SequenceReg0b100s1
dwc_ddrphy_apb_wr(0x90157,0x9); // DWC_DDRPHYA_INITENG0_SequenceReg0b100s2
dwc_ddrphy_apb_wr(0x90158,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b101s0
dwc_ddrphy_apb_wr(0x90159,0x400); // DWC_DDRPHYA_INITENG0_SequenceReg0b101s1
dwc_ddrphy_apb_wr(0x9015a,0x10e); // DWC_DDRPHYA_INITENG0_SequenceReg0b101s2
dwc_ddrphy_apb_wr(0x9015b,0x8); // DWC_DDRPHYA_INITENG0_SequenceReg0b102s0
dwc_ddrphy_apb_wr(0x9015c,0xe8); // DWC_DDRPHYA_INITENG0_SequenceReg0b102s1
dwc_ddrphy_apb_wr(0x9015d,0x109); // DWC_DDRPHYA_INITENG0_SequenceReg0b102s2
dwc_ddrphy_apb_wr(0x9015e,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b103s0
dwc_ddrphy_apb_wr(0x9015f,0x8140); // DWC_DDRPHYA_INITENG0_SequenceReg0b103s1
dwc_ddrphy_apb_wr(0x90160,0x10c); // DWC_DDRPHYA_INITENG0_SequenceReg0b103s2
dwc_ddrphy_apb_wr(0x90161,0x10); // DWC_DDRPHYA_INITENG0_SequenceReg0b104s0
dwc_ddrphy_apb_wr(0x90162,0x8138); // DWC_DDRPHYA_INITENG0_SequenceReg0b104s1
dwc_ddrphy_apb_wr(0x90163,0x10c); // DWC_DDRPHYA_INITENG0_SequenceReg0b104s2
dwc_ddrphy_apb_wr(0x90164,0x8); // DWC_DDRPHYA_INITENG0_SequenceReg0b105s0
dwc_ddrphy_apb_wr(0x90165,0x7c8); // DWC_DDRPHYA_INITENG0_SequenceReg0b105s1
dwc_ddrphy_apb_wr(0x90166,0x101); // DWC_DDRPHYA_INITENG0_SequenceReg0b105s2
dwc_ddrphy_apb_wr(0x90167,0x8); // DWC_DDRPHYA_INITENG0_SequenceReg0b106s0
dwc_ddrphy_apb_wr(0x90168,0x448); // DWC_DDRPHYA_INITENG0_SequenceReg0b106s1
dwc_ddrphy_apb_wr(0x90169,0x109); // DWC_DDRPHYA_INITENG0_SequenceReg0b106s2
dwc_ddrphy_apb_wr(0x9016a,0xf); // DWC_DDRPHYA_INITENG0_SequenceReg0b107s0
dwc_ddrphy_apb_wr(0x9016b,0x7c0); // DWC_DDRPHYA_INITENG0_SequenceReg0b107s1
dwc_ddrphy_apb_wr(0x9016c,0x109); // DWC_DDRPHYA_INITENG0_SequenceReg0b107s2
dwc_ddrphy_apb_wr(0x9016d,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b108s0
dwc_ddrphy_apb_wr(0x9016e,0xe8); // DWC_DDRPHYA_INITENG0_SequenceReg0b108s1
dwc_ddrphy_apb_wr(0x9016f,0x109); // DWC_DDRPHYA_INITENG0_SequenceReg0b108s2
dwc_ddrphy_apb_wr(0x90170,0x47); // DWC_DDRPHYA_INITENG0_SequenceReg0b109s0
dwc_ddrphy_apb_wr(0x90171,0x630); // DWC_DDRPHYA_INITENG0_SequenceReg0b109s1
dwc_ddrphy_apb_wr(0x90172,0x109); // DWC_DDRPHYA_INITENG0_SequenceReg0b109s2
dwc_ddrphy_apb_wr(0x90173,0x8); // DWC_DDRPHYA_INITENG0_SequenceReg0b110s0
dwc_ddrphy_apb_wr(0x90174,0x618); // DWC_DDRPHYA_INITENG0_SequenceReg0b110s1
dwc_ddrphy_apb_wr(0x90175,0x109); // DWC_DDRPHYA_INITENG0_SequenceReg0b110s2
dwc_ddrphy_apb_wr(0x90176,0x8); // DWC_DDRPHYA_INITENG0_SequenceReg0b111s0
dwc_ddrphy_apb_wr(0x90177,0xe0); // DWC_DDRPHYA_INITENG0_SequenceReg0b111s1
dwc_ddrphy_apb_wr(0x90178,0x109); // DWC_DDRPHYA_INITENG0_SequenceReg0b111s2
dwc_ddrphy_apb_wr(0x90179,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b112s0
dwc_ddrphy_apb_wr(0x9017a,0x7c8); // DWC_DDRPHYA_INITENG0_SequenceReg0b112s1
dwc_ddrphy_apb_wr(0x9017b,0x109); // DWC_DDRPHYA_INITENG0_SequenceReg0b112s2
dwc_ddrphy_apb_wr(0x9017c,0x8); // DWC_DDRPHYA_INITENG0_SequenceReg0b113s0
dwc_ddrphy_apb_wr(0x9017d,0x8140); // DWC_DDRPHYA_INITENG0_SequenceReg0b113s1
dwc_ddrphy_apb_wr(0x9017e,0x10c); // DWC_DDRPHYA_INITENG0_SequenceReg0b113s2
dwc_ddrphy_apb_wr(0x9017f,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b114s0
dwc_ddrphy_apb_wr(0x90180,0x478); // DWC_DDRPHYA_INITENG0_SequenceReg0b114s1
dwc_ddrphy_apb_wr(0x90181,0x109); // DWC_DDRPHYA_INITENG0_SequenceReg0b114s2
dwc_ddrphy_apb_wr(0x90182,0x0); // DWC_DDRPHYA_INITENG0_SequenceReg0b115s0
dwc_ddrphy_apb_wr(0x90183,0x1); // DWC_DDRPHYA_INITENG0_SequenceReg0b115s1
dwc_ddrphy_apb_wr(0x90184,0x8); // DWC_DDRPHYA_INITENG0_SequenceReg0b115s2
dwc_ddrphy_apb_wr(0x90185,0x8); // DWC_DDRPHYA_INITENG0_SequenceReg0b116s0
dwc_ddrphy_apb_wr(0x90186,0x4); // DWC_DDRPHYA_INITENG0_SequenceReg0b116s1
dwc_ddrphy_apb_wr(0x90187,0x8); // DWC_DDRPHYA_INITENG0_SequenceReg0b116s2
dwc_ddrphy_apb_wr(0x90188,0x8); // DWC_DDRPHYA_INITENG0_SequenceReg0b117s0
dwc_ddrphy_apb_wr(0x90189,0x7c8); // DWC_DDRPHYA_INITENG0_SequenceReg0b117s1
dwc_ddrphy_apb_wr(0x9018a,0x101); // DWC_DDRPHYA_INITENG0_SequenceReg0b117s2
dwc_ddrphy_apb_wr(0x90006,0x0); // DWC_DDRPHYA_INITENG0_PostSequenceReg0b0s0
dwc_ddrphy_apb_wr(0x90007,0x0); // DWC_DDRPHYA_INITENG0_PostSequenceReg0b0s1
dwc_ddrphy_apb_wr(0x90008,0x8); // DWC_DDRPHYA_INITENG0_PostSequenceReg0b0s2
dwc_ddrphy_apb_wr(0x90009,0x0); // DWC_DDRPHYA_INITENG0_PostSequenceReg0b1s0
dwc_ddrphy_apb_wr(0x9000a,0x0); // DWC_DDRPHYA_INITENG0_PostSequenceReg0b1s1
dwc_ddrphy_apb_wr(0x9000b,0x0); // DWC_DDRPHYA_INITENG0_PostSequenceReg0b1s2
dwc_ddrphy_apb_wr(0xd00e7,0x400); // DWC_DDRPHYA_APBONLY0_SequencerOverride
dwc_ddrphy_apb_wr(0x90017,0x0); // DWC_DDRPHYA_INITENG0_StartVector0b0
dwc_ddrphy_apb_wr(0x9001f,0x29); // DWC_DDRPHYA_INITENG0_StartVector0b8
dwc_ddrphy_apb_wr(0x90026,0x6a); // DWC_DDRPHYA_INITENG0_StartVector0b15
dwc_ddrphy_apb_wr(0x400d0,0x0); // DWC_DDRPHYA_ACSM0_AcsmCsMapCtrl0
dwc_ddrphy_apb_wr(0x400d1,0x101); // DWC_DDRPHYA_ACSM0_AcsmCsMapCtrl1
dwc_ddrphy_apb_wr(0x400d2,0x105); // DWC_DDRPHYA_ACSM0_AcsmCsMapCtrl2
dwc_ddrphy_apb_wr(0x400d3,0x107); // DWC_DDRPHYA_ACSM0_AcsmCsMapCtrl3
dwc_ddrphy_apb_wr(0x400d4,0x10f); // DWC_DDRPHYA_ACSM0_AcsmCsMapCtrl4
dwc_ddrphy_apb_wr(0x400d5,0x202); // DWC_DDRPHYA_ACSM0_AcsmCsMapCtrl5
dwc_ddrphy_apb_wr(0x400d6,0x20a); // DWC_DDRPHYA_ACSM0_AcsmCsMapCtrl6
dwc_ddrphy_apb_wr(0x400d7,0x20b); // DWC_DDRPHYA_ACSM0_AcsmCsMapCtrl7
dwc_ddrphy_apb_wr(0x2003a,0x2); // DWC_DDRPHYA_MASTER0_DbyteDllModeCntrl
// // [phyinit_I_loadPIEImage] Pstate=0,  Memclk=1600MHz, Programming Seq0BDLY0 to 0x64
dwc_ddrphy_apb_wr(0x2000b,0x64); // DWC_DDRPHYA_MASTER0_Seq0BDLY0_p0
// // [phyinit_I_loadPIEImage] Pstate=0,  Memclk=1600MHz, Programming Seq0BDLY1 to 0xc8
dwc_ddrphy_apb_wr(0x2000c,0xc8); // DWC_DDRPHYA_MASTER0_Seq0BDLY1_p0
// // [phyinit_I_loadPIEImage] Pstate=0,  Memclk=1600MHz, Programming Seq0BDLY2 to 0x7d0
dwc_ddrphy_apb_wr(0x2000d,0x7d0); // DWC_DDRPHYA_MASTER0_Seq0BDLY2_p0
// // [phyinit_I_loadPIEImage] Pstate=0,  Memclk=1600MHz, Programming Seq0BDLY3 to 0x2c
dwc_ddrphy_apb_wr(0x2000e,0x2c); // DWC_DDRPHYA_MASTER0_Seq0BDLY3_p0
dwc_ddrphy_apb_wr(0x9000c,0x0); // DWC_DDRPHYA_INITENG0_Seq0BDisableFlag0
dwc_ddrphy_apb_wr(0x9000d,0x173); // DWC_DDRPHYA_INITENG0_Seq0BDisableFlag1
dwc_ddrphy_apb_wr(0x9000e,0x60); // DWC_DDRPHYA_INITENG0_Seq0BDisableFlag2
dwc_ddrphy_apb_wr(0x9000f,0x6110); // DWC_DDRPHYA_INITENG0_Seq0BDisableFlag3
dwc_ddrphy_apb_wr(0x90010,0x2152); // DWC_DDRPHYA_INITENG0_Seq0BDisableFlag4
dwc_ddrphy_apb_wr(0x90011,0xdfbd); // DWC_DDRPHYA_INITENG0_Seq0BDisableFlag5
dwc_ddrphy_apb_wr(0x90012,0x2060); // DWC_DDRPHYA_INITENG0_Seq0BDisableFlag6
dwc_ddrphy_apb_wr(0x90013,0x6152); // DWC_DDRPHYA_INITENG0_Seq0BDisableFlag7
// // [phyinit_I_loadPIEImage] Pstate=0, Programming AcsmPlayback0x0 to 0xe0
dwc_ddrphy_apb_wr(0x40080,0xe0); // DWC_DDRPHYA_ACSM0_AcsmPlayback0x0_p0
// // [phyinit_I_loadPIEImage] Pstate=0, Programming AcsmPlayback1x0 to 0x12
dwc_ddrphy_apb_wr(0x40081,0x12); // DWC_DDRPHYA_ACSM0_AcsmPlayback1x0_p0
// // [phyinit_I_loadPIEImage] Pstate=0, Programming AcsmPlayback0x1 to 0xe0
dwc_ddrphy_apb_wr(0x40082,0xe0); // DWC_DDRPHYA_ACSM0_AcsmPlayback0x1_p0
// // [phyinit_I_loadPIEImage] Pstate=0, Programming AcsmPlayback1x1 to 0x12
dwc_ddrphy_apb_wr(0x40083,0x12); // DWC_DDRPHYA_ACSM0_AcsmPlayback1x1_p0
// // [phyinit_I_loadPIEImage] Pstate=0, Programming AcsmPlayback0x2 to 0xe0
dwc_ddrphy_apb_wr(0x40084,0xe0); // DWC_DDRPHYA_ACSM0_AcsmPlayback0x2_p0
// // [phyinit_I_loadPIEImage] Pstate=0, Programming AcsmPlayback1x2 to 0x12
dwc_ddrphy_apb_wr(0x40085,0x12); // DWC_DDRPHYA_ACSM0_AcsmPlayback1x2_p0
// // [phyinit_I_loadPIEImage] Programing Training Hardware Registers for mission mode retraining
dwc_ddrphy_apb_wr(0x400fd,0xf); // DWC_DDRPHYA_ACSM0_AcsmCtrl13
dwc_ddrphy_apb_wr(0x10011,0x1); // DWC_DDRPHYA_DBYTE0_TsmByte1
dwc_ddrphy_apb_wr(0x10012,0x1); // DWC_DDRPHYA_DBYTE0_TsmByte2
dwc_ddrphy_apb_wr(0x10013,0x180); // DWC_DDRPHYA_DBYTE0_TsmByte3
dwc_ddrphy_apb_wr(0x10018,0x1); // DWC_DDRPHYA_DBYTE0_TsmByte5
dwc_ddrphy_apb_wr(0x10002,0x6209); // DWC_DDRPHYA_DBYTE0_TrainingParam
dwc_ddrphy_apb_wr(0x100b2,0x1); // DWC_DDRPHYA_DBYTE0_Tsm0_i0
dwc_ddrphy_apb_wr(0x101b4,0x1); // DWC_DDRPHYA_DBYTE0_Tsm2_i1
dwc_ddrphy_apb_wr(0x102b4,0x1); // DWC_DDRPHYA_DBYTE0_Tsm2_i2
dwc_ddrphy_apb_wr(0x103b4,0x1); // DWC_DDRPHYA_DBYTE0_Tsm2_i3
dwc_ddrphy_apb_wr(0x104b4,0x1); // DWC_DDRPHYA_DBYTE0_Tsm2_i4
dwc_ddrphy_apb_wr(0x105b4,0x1); // DWC_DDRPHYA_DBYTE0_Tsm2_i5
dwc_ddrphy_apb_wr(0x106b4,0x1); // DWC_DDRPHYA_DBYTE0_Tsm2_i6
dwc_ddrphy_apb_wr(0x107b4,0x1); // DWC_DDRPHYA_DBYTE0_Tsm2_i7
dwc_ddrphy_apb_wr(0x108b4,0x1); // DWC_DDRPHYA_DBYTE0_Tsm2_i8
dwc_ddrphy_apb_wr(0x11011,0x1); // DWC_DDRPHYA_DBYTE1_TsmByte1
dwc_ddrphy_apb_wr(0x11012,0x1); // DWC_DDRPHYA_DBYTE1_TsmByte2
dwc_ddrphy_apb_wr(0x11013,0x180); // DWC_DDRPHYA_DBYTE1_TsmByte3
dwc_ddrphy_apb_wr(0x11018,0x1); // DWC_DDRPHYA_DBYTE1_TsmByte5
dwc_ddrphy_apb_wr(0x11002,0x6209); // DWC_DDRPHYA_DBYTE1_TrainingParam
dwc_ddrphy_apb_wr(0x110b2,0x1); // DWC_DDRPHYA_DBYTE1_Tsm0_i0
dwc_ddrphy_apb_wr(0x111b4,0x1); // DWC_DDRPHYA_DBYTE1_Tsm2_i1
dwc_ddrphy_apb_wr(0x112b4,0x1); // DWC_DDRPHYA_DBYTE1_Tsm2_i2
dwc_ddrphy_apb_wr(0x113b4,0x1); // DWC_DDRPHYA_DBYTE1_Tsm2_i3
dwc_ddrphy_apb_wr(0x114b4,0x1); // DWC_DDRPHYA_DBYTE1_Tsm2_i4
dwc_ddrphy_apb_wr(0x115b4,0x1); // DWC_DDRPHYA_DBYTE1_Tsm2_i5
dwc_ddrphy_apb_wr(0x116b4,0x1); // DWC_DDRPHYA_DBYTE1_Tsm2_i6
dwc_ddrphy_apb_wr(0x117b4,0x1); // DWC_DDRPHYA_DBYTE1_Tsm2_i7
dwc_ddrphy_apb_wr(0x118b4,0x1); // DWC_DDRPHYA_DBYTE1_Tsm2_i8
dwc_ddrphy_apb_wr(0x12011,0x1); // DWC_DDRPHYA_DBYTE2_TsmByte1
dwc_ddrphy_apb_wr(0x12012,0x1); // DWC_DDRPHYA_DBYTE2_TsmByte2
dwc_ddrphy_apb_wr(0x12013,0x180); // DWC_DDRPHYA_DBYTE2_TsmByte3
dwc_ddrphy_apb_wr(0x12018,0x1); // DWC_DDRPHYA_DBYTE2_TsmByte5
dwc_ddrphy_apb_wr(0x12002,0x6209); // DWC_DDRPHYA_DBYTE2_TrainingParam
dwc_ddrphy_apb_wr(0x120b2,0x1); // DWC_DDRPHYA_DBYTE2_Tsm0_i0
dwc_ddrphy_apb_wr(0x121b4,0x1); // DWC_DDRPHYA_DBYTE2_Tsm2_i1
dwc_ddrphy_apb_wr(0x122b4,0x1); // DWC_DDRPHYA_DBYTE2_Tsm2_i2
dwc_ddrphy_apb_wr(0x123b4,0x1); // DWC_DDRPHYA_DBYTE2_Tsm2_i3
dwc_ddrphy_apb_wr(0x124b4,0x1); // DWC_DDRPHYA_DBYTE2_Tsm2_i4
dwc_ddrphy_apb_wr(0x125b4,0x1); // DWC_DDRPHYA_DBYTE2_Tsm2_i5
dwc_ddrphy_apb_wr(0x126b4,0x1); // DWC_DDRPHYA_DBYTE2_Tsm2_i6
dwc_ddrphy_apb_wr(0x127b4,0x1); // DWC_DDRPHYA_DBYTE2_Tsm2_i7
dwc_ddrphy_apb_wr(0x128b4,0x1); // DWC_DDRPHYA_DBYTE2_Tsm2_i8
dwc_ddrphy_apb_wr(0x13011,0x1); // DWC_DDRPHYA_DBYTE3_TsmByte1
dwc_ddrphy_apb_wr(0x13012,0x1); // DWC_DDRPHYA_DBYTE3_TsmByte2
dwc_ddrphy_apb_wr(0x13013,0x180); // DWC_DDRPHYA_DBYTE3_TsmByte3
dwc_ddrphy_apb_wr(0x13018,0x1); // DWC_DDRPHYA_DBYTE3_TsmByte5
dwc_ddrphy_apb_wr(0x13002,0x6209); // DWC_DDRPHYA_DBYTE3_TrainingParam
dwc_ddrphy_apb_wr(0x130b2,0x1); // DWC_DDRPHYA_DBYTE3_Tsm0_i0
dwc_ddrphy_apb_wr(0x131b4,0x1); // DWC_DDRPHYA_DBYTE3_Tsm2_i1
dwc_ddrphy_apb_wr(0x132b4,0x1); // DWC_DDRPHYA_DBYTE3_Tsm2_i2
dwc_ddrphy_apb_wr(0x133b4,0x1); // DWC_DDRPHYA_DBYTE3_Tsm2_i3
dwc_ddrphy_apb_wr(0x134b4,0x1); // DWC_DDRPHYA_DBYTE3_Tsm2_i4
dwc_ddrphy_apb_wr(0x135b4,0x1); // DWC_DDRPHYA_DBYTE3_Tsm2_i5
dwc_ddrphy_apb_wr(0x136b4,0x1); // DWC_DDRPHYA_DBYTE3_Tsm2_i6
dwc_ddrphy_apb_wr(0x137b4,0x1); // DWC_DDRPHYA_DBYTE3_Tsm2_i7
dwc_ddrphy_apb_wr(0x138b4,0x1); // DWC_DDRPHYA_DBYTE3_Tsm2_i8
// // [phyinit_I_loadPIEImage] Turn on calibration and hold idle until dfi_init_start is asserted sequence is triggered.
dwc_ddrphy_apb_wr(0x20089,0x1); // DWC_DDRPHYA_MASTER0_CalZap
// // [phyinit_I_loadPIEImage] Programming CalRate::CalInterval to 0x9
// // [phyinit_I_loadPIEImage] Programming CalRate::CalOnce to 0x0
// // [phyinit_I_loadPIEImage] Programming CalRate::CalRun to 0x1
dwc_ddrphy_apb_wr(0x20088,0x19); // DWC_DDRPHYA_MASTER0_CalRate
// // [phyinit_I_loadPIEImage] Disabling Ucclk (PMU)
dwc_ddrphy_apb_wr(0xc0080,0x2); // DWC_DDRPHYA_DRTUB0_UcclkHclkEnables
// // [phyinit_I_loadPIEImage] Isolate the APB access from the internal CSRs by setting the MicroContMuxSel CSR to 1. 
dwc_ddrphy_apb_wr(0xd0000,0x1); // DWC_DDRPHYA_APBONLY0_MicroContMuxSel
// // [phyinit_I_loadPIEImage] End of dwc_ddrphy_phyinit_I_loadPIEImage()
// 
// 
// //##############################################################
// //
// // dwc_ddrphy_phyinit_userCustom_customPostTrain is a user-editable function.
// //
// // See PhyInit App Note for detailed description and function usage
// 
// //##############################################################
// 
dwc_ddrphy_phyinit_userCustom_customPostTrain ();

// // [dwc_ddrphy_phyinit_userCustom_customPostTrain] End of dwc_ddrphy_phyinit_userCustom_customPostTrain()
// // [dwc_ddrphy_phyinit_userCustom_J_enterMissionMode] Start of dwc_ddrphy_phyinit_userCustom_J_enterMissionMode()
// 
// 
// //##############################################################
// //
// // (J) Initialize the PHY to Mission Mode through DFI Initialization 
// //
// // Initialize the PHY to mission mode as follows: 
// //
// // 1. Set the PHY input clocks to the desired frequency. 
// // 2. Initialize the PHY to mission mode by performing DFI Initialization. 
// //    Please see the DFI specification for more information. See the DFI frequency bus encoding in section <XXX>.
// // Note: The PHY training firmware initializes the DRAM state. if skip 
// // training is used, the DRAM state is not initialized. 
// //
// //##############################################################
// 
dwc_ddrphy_phyinit_userCustom_J_enterMissionMode ();

// 
// // [dwc_ddrphy_phyinit_userCustom_J_enterMissionMode] End of dwc_ddrphy_phyinit_userCustom_J_enterMissionMode()
// [dwc_ddrphy_phyinit_sequence] End of dwc_ddrphy_phyinit_sequence()
// [dwc_ddrphy_phyinit_main] End of dwc_ddrphy_phyinit_main()
